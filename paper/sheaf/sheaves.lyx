#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{url} 
\end_preamble
\use_default_options false
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Graphical Sheaves
\end_layout

\begin_layout Author
Linas Vepstas
\end_layout

\begin_layout Date
27 October 2017
\end_layout

\begin_layout Abstract
An examination of a certain method for extracting structure from graphs,
 in a fashion resembling sheaves.
\end_layout

\begin_layout Section*
Intro
\end_layout

\begin_layout Standard
Its this we explore
\end_layout

\begin_layout Standard
Begin with the standard definition of a graph.
\end_layout

\begin_layout Definition*
A 
\noun on
graph
\noun default
 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 is an ordered pair 
\begin_inset Formula $\left(V,E\right)$
\end_inset

 of two sets, the first being the set 
\begin_inset Formula $V$
\end_inset

 of vertices, and the second being the set 
\begin_inset Formula $E$
\end_inset

 of edges.
 An edge 
\begin_inset Formula $e\in E$
\end_inset

 is a pair 
\begin_inset Formula $\left(v_{1},v_{2}\right)$
\end_inset

 of vertices, where every 
\begin_inset Formula $v_{k}$
\end_inset

 
\emph on
must
\emph default
 be a member of 
\begin_inset Formula $V$
\end_inset

.
 That is, edges in 
\begin_inset Formula $E$
\end_inset

 can only connect vertexes in 
\begin_inset Formula $V$
\end_inset

, and not to something else.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
For directed graphs, the vertex ordering in the edge matters.
 For undirected graphs, it does not.
 The subsequent will assume both directed and undirected edges, as the occasion
 and the need fits.
 In most of what follows, it will usually be assumed that there are no edges
 with 
\begin_inset Formula $v_{1}=v_{2}$
\end_inset

 and that there is at most one edge connecting any given pair of vertexes.
 This is primarily for the convenience of the definitions, and not a fundamental
 limitation; the primary application does not require either construct,
 although the extension to allow this is straight-forward.
 Similar remarks apply to graphs with labelled vertexes or edges.
 A notion of types will be introduced later on.
\end_layout

\begin_layout Standard
There are other ways of defining and specifying graphs.
 The one that will be of primary interest here will be one that defines
 graphs as a collection of sections.
 These, in turn, are composed of seeds.
\end_layout

\begin_layout Definition*
A 
\noun on
seed
\noun default
 is a vertex and the set of edges that connect to it.
 That is, it is the pair 
\begin_inset Formula $\left(v,E_{v}\right)$
\end_inset

 where 
\begin_inset Formula $v$
\end_inset

 is a single vertex, and 
\begin_inset Formula $E_{v}$
\end_inset

 is a set of edges containing that vertex, i.e.
 that set of edges having 
\begin_inset Formula $v$
\end_inset

 as one or the other endpoint.
 The vertex 
\begin_inset Formula $v$
\end_inset

 may be called the 
\noun on
germ
\noun default
 of the seed.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
It should be clear that, given a graph 
\begin_inset Formula $G$
\end_inset

, one can equivalently describe it as a set of seeds.
 The converse is not 
\begin_inset Quotes eld
\end_inset

naturally
\begin_inset Quotes erd
\end_inset

 true.
 Consider a single seed, consisting of one vertex 
\begin_inset Formula $v_{1}$
\end_inset

, and a single edge 
\begin_inset Formula $e=\left(v_{1},v_{2}\right)$
\end_inset

.
 Then the pair 
\begin_inset Formula $\left(V,E\right)$
\end_inset

 with 
\begin_inset Formula $V=\left\{ v_{1}\right\} $
\end_inset

 and 
\begin_inset Formula $E=\left\{ \left(v_{1},v_{2}\right)\right\} $
\end_inset

 is 
\emph on
not
\emph default
 a graph, because 
\begin_inset Formula $v_{2}$
\end_inset

 is missing from the set 
\begin_inset Formula $V$
\end_inset

.
 Of course, we could implicitly include 
\begin_inset Formula $v_{2}$
\end_inset

 in the collection of vertexes, but for reasons that will hopefully become
 clear, this is not 
\begin_inset Quotes eld
\end_inset

natural
\begin_inset Quotes erd
\end_inset

, and not desired at this stage.
\end_layout

\begin_layout Standard
Thus, given a seed, each edge in that seed has one 
\begin_inset Quotes eld
\end_inset

connected
\begin_inset Quotes erd
\end_inset

 endpoint, and one 
\begin_inset Quotes eld
\end_inset

unconnected
\begin_inset Quotes erd
\end_inset

 endpoint.
 The 
\begin_inset Quotes eld
\end_inset

connected
\begin_inset Quotes erd
\end_inset

 endpoint is that endpoint that is 
\begin_inset Formula $v$
\end_inset

.
 The other endpoint will commonly be called the 
\noun on
connector
\noun default
; equivalently, the whole edge can be taken to be the connector.
\end_layout

\begin_layout Definition*
A 
\noun on
section
\noun default
 is a set of seeds.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
It should be clear that a graph 
\begin_inset Formula $G$
\end_inset

 can be expressed as section; that section has the nice property that all
 of the germs appear once (and only once) in the set 
\begin_inset Formula $V$
\end_inset

 of 
\begin_inset Formula $G$
\end_inset

, and that all of the edges in 
\begin_inset Formula $E$
\end_inset

 appear twice, once each in two distinct seeds.
 This connectivity property motivates the following definition: 
\end_layout

\begin_layout Definition*
Given a section 
\begin_inset Formula $S$
\end_inset

, a 
\noun on
link
\noun default
 is any edge 
\begin_inset Formula $\left(v_{1},v_{2}\right)$
\end_inset

 where both 
\begin_inset Formula $v_{1}$
\end_inset

 and 
\begin_inset Formula $v_{2}$
\end_inset

 appear as germs of seeds in 
\begin_inset Formula $S$
\end_inset

.
 Two seeds are 
\noun on
connected
\noun default
 when there is a link between them.
\end_layout

\begin_layout Standard
The use of links allows the concepts of paths and connectivity, taken from
 graph theory, to be imported into the current context.
 Thus, one can obviously define:
\end_layout

\begin_layout Definition*
A 
\noun on
connected section
\noun default
, or a 
\noun on
contiguous section
\noun default
 is a section where every germ is connected to every other germ via a path
 through the edges.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
In graph theory, this would normally be called a 
\begin_inset Quotes eld
\end_inset

connected graph
\begin_inset Quotes erd
\end_inset

, but we cannot fairly call it that because the seeds and sections were
 defined in such a way that they are not graphs in and of themselves; they
 only become graphs when they are fully connected.
 Never-the-less, it is fairly safe and straight-foreward to apply common
 concepts from graph-theory.
 Sections are almost like graphs, but not quite.
\end_layout

\begin_layout Standard
Note that there are two types of edges in a section: those edges that connect
 to nothing, and those edges that connect to other seeds in that section.
 Henceforth, the unconnected edges will be called connectors (as defined
 above), while the fully-connected edges will be called links (also defined
 above).
 Connectors can be thought of as a kind-of half-edge: incomplete, missing
 the far end, while links are fully connected, whole.
\end_layout

\begin_layout Standard
Seeds and sections can (and should!) be visualized as hedgehogs â€“ the connectors
 can be thought of as spiny bits sticking out, waiting to make a connection,
 while the hedgehog body consists of the vertices and the links connecting
 them.
\end_layout

\begin_layout Standard
Implicit in the above definitions was that, during link formation, an edge
 is only allowed to connect to another seed if and only if the connector
 matches the germ.
 That is, if 
\begin_inset Formula $\left(v_{1},v_{2}\right)$
\end_inset

 is an edge rooted in the seed for 
\begin_inset Formula $v_{1}$
\end_inset

 and if 
\begin_inset Formula $\left(v_{3},v_{4}\right)$
\end_inset

 is an edge rooted in the seed for 
\begin_inset Formula $v_{3}$
\end_inset

, then these two can form a link if and only if 
\begin_inset Formula $v_{2}=v_{3}$
\end_inset

 and 
\begin_inset Formula $v_{4}=v_{1}$
\end_inset

.
 That is, the connectors are typed: they can only connect to seeds that
 are of the same type as the unconnected end of the edge.
\end_layout

\begin_layout Standard
This motivates a different way of looking at seeds: they can be visualized
 as jigsaw puzzle pieces, where any given tab on one jigsaw piece can fit
 into one and only one slot on another jigsaw piece.
 This union of a tab+slot is the link.
 The types of the connectors will later be seen to be the same thing as
 the types of type theory; that is, they are bona-fide types.
\end_layout

\begin_layout Subsection*
Why sections?
\end_layout

\begin_layout Standard
Whats the point of introducing this seemingly non-standard approach to something
 that looks a lot like graph theory? There are several reasons.
\end_layout

\begin_layout Itemize
From a computational viewpoint, sections have nice properties that a list
 of vertexes and edges do not.
 Given a single seed, one 
\begin_inset Quotes eld
\end_inset

instantly
\begin_inset Quotes erd
\end_inset

 know 
\emph on
all
\emph default
 of the edges attached to its germ: they are listed right there.
 By contrast, given only a graph description, one has to search the entire
 list 
\begin_inset Formula $E$
\end_inset

 for any edges that might contain the given vertex.
 Computationally, searching large lists is inefficeint, espcially so for
 very large graphs.
\end_layout

\begin_layout Itemize
The subset of a section is always a section.
 This is not the case for a graph: given 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

, some arbitrary subset of 
\begin_inset Formula $V$
\end_inset

 and some arbitrary subset of 
\begin_inset Formula $E$
\end_inset

 do not generally form a graph; one has to apply consistency conditions
 to get a subgraph.
\end_layout

\begin_layout Itemize
Readers familiar with link-grammar should have by now instantly recognized
 seeds as being more or less the same thing as 
\begin_inset Quotes eld
\end_inset

disjuncts
\begin_inset Quotes erd
\end_inset

 in link-grammar.
 In fact, link-grammar disjuncts are a bit more complicated than seeds;
 this is the topic of the next section.
\end_layout

\begin_layout Itemize
In certain ways, the connectors on a seed look like the uncontracted indexes
 on a tensor.
 That is, a seed with 
\begin_inset Formula $n$
\end_inset

 connectors on it looks like a tensor of order 
\begin_inset Formula $n$
\end_inset

.
 A link looks like a pair of indexes that have been contracted.
 Tensors have additional properties that seeds do not have, however, the
 notion of connecting together connectors to form links means that many
 of the notions from a tensor algebra can be carried over into the current
 context.
 This includes, at least partly, the notion that a tensor category describes
 the algebra of sections.
\end_layout

\begin_layout Standard
The
\end_layout

\begin_layout Standard
at least not if we take 
\end_layout

\begin_layout Standard
However, a set of seeds is not 
\end_layout

\begin_layout Definition*
sectin
\end_layout

\end_body
\end_document
