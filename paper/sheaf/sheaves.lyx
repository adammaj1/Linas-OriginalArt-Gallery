#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{url} 
\end_preamble
\use_default_options false
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Graphical Sheaves
\end_layout

\begin_layout Author
Linas Vepstas
\end_layout

\begin_layout Date
27 October 2017
\end_layout

\begin_layout Abstract
An examination of a certain method for extracting structure from graphs,
 in a fashion resembling sheaves.
\end_layout

\begin_layout Section*
Intro
\end_layout

\begin_layout Standard
This document attempts to give a precise definition to some concepts that
 I have been throwing around rather loosely, and have been slapped and zapped
 for doing so.
 Thus, it attempts to spell things out in detail, although the result reads
 a bit simplistically, and is a bit turgid.
 The goal is to be precise enough that the proverbial 
\begin_inset Quotes eld
\end_inset

anyone
\begin_inset Quotes erd
\end_inset

 can follow through and understand.
\end_layout

\begin_layout Standard
I had hoped that what I describe here had, in fact, been previously described
 by others, written down and available, even in some textbook somewhere,
 because its simply not that hard.
 However, after several different confused and slightly acrimonious conversation
s, it appears that this is not the case.
 Thus, I have to wade in and do yet more work myself.
 As if there's not enough.
 
\end_layout

\begin_layout Standard
The thing being spelled out is a kind of 
\begin_inset Quotes eld
\end_inset

sheaf theory for graphs
\begin_inset Quotes erd
\end_inset

, except that the structures being explored are not exactly graphs in the
 canonical sense of graph theory, nor are they quite sheaves in the customary
 sense, even though they obey the axioms of sheaf theory.
 At any rate, customary sheaf theory carries with it a huge amount of abstruse
 and abstract baggage almost all of which is simply not required for the
 envisioned application.
\end_layout

\begin_layout Standard
The envisioned application is the use of machine learning to study natural
 language.
 Due to the nature of natural language, the topic inherently touches on
 other interesting areas of mathematics, including parsing, type theory
 and category theory.
 But this all comes later on, after the basics are set up.
\end_layout

\begin_layout Standard
We begin first by giving a provisional definition for a section, and some
 motivation for that definition.
 Next, a definition of sheaves, not in generality, but limited to the current
 context.
 
\end_layout

\begin_layout Section*
Sections
\end_layout

\begin_layout Standard
Begin with the standard definition of a graph.
\end_layout

\begin_layout Definition*
A 
\noun on
graph
\noun default
 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 is an ordered pair 
\begin_inset Formula $\left(V,E\right)$
\end_inset

 of two sets, the first being the set 
\begin_inset Formula $V$
\end_inset

 of vertices, and the second being the set 
\begin_inset Formula $E$
\end_inset

 of edges.
 An edge 
\begin_inset Formula $e\in E$
\end_inset

 is a pair 
\begin_inset Formula $\left(v_{1},v_{2}\right)$
\end_inset

 of vertices, where every 
\begin_inset Formula $v_{k}$
\end_inset

 
\emph on
must
\emph default
 be a member of 
\begin_inset Formula $V$
\end_inset

.
 That is, edges in 
\begin_inset Formula $E$
\end_inset

 can only connect vertexes in 
\begin_inset Formula $V$
\end_inset

, and not to something else.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
For directed graphs, the vertex ordering in the edge matters.
 For undirected graphs, it does not.
 The subsequent will assume both directed and undirected edges, as the occasion
 and the need fits.
 In most of what follows, it will usually be assumed that there are no edges
 with 
\begin_inset Formula $v_{1}=v_{2}$
\end_inset

 and that there is at most one edge connecting any given pair of vertexes.
 This is primarily for general convenience and simplicity of discussion,
 rather than a fundamental limitation.
 It just makes things easier to talk about and less cluttered at the start.
 The primary application does not require either construct, although the
 extension to allow all this is straight-forward.
 Similar remarks apply to graphs with labeled vertexes or edges.
 A notion of types will be introduced later on.
 The intended application of this machinery will be graphs whose edges and
 vertexes carry numerical weights on them, but these do not need to be talked
 about at this stage.
 Just keep in mind that these will appear out of thin air, later on.
\end_layout

\begin_layout Standard
Besides the above definition, there are other ways of defining and specifying
 graphs.
 The one that will be of primary interest here will be one that defines
 graphs as a collection of sections.
 These, in turn, are composed of seeds.
\end_layout

\begin_layout Definition*
A 
\noun on
seed
\noun default
 is a vertex and the set of edges that connect to it.
 That is, it is the pair 
\begin_inset Formula $\left(v,E_{v}\right)$
\end_inset

 where 
\begin_inset Formula $v$
\end_inset

 is a single vertex, and 
\begin_inset Formula $E_{v}$
\end_inset

 is a set of edges containing that vertex, i.e.
 that set of edges having 
\begin_inset Formula $v$
\end_inset

 as one or the other endpoint.
 The vertex 
\begin_inset Formula $v$
\end_inset

 may be called the 
\noun on
germ
\noun default
 of the seed.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
It should be clear that, given a graph 
\begin_inset Formula $G$
\end_inset

, one can equivalently describe it as a set of seeds.
 The converse is not 
\begin_inset Quotes eld
\end_inset

naturally
\begin_inset Quotes erd
\end_inset

 true.
 Consider a single seed, consisting of one vertex 
\begin_inset Formula $v_{1}$
\end_inset

, and a single edge 
\begin_inset Formula $e=\left(v_{1},v_{2}\right)$
\end_inset

.
 Then the pair 
\begin_inset Formula $\left(V,E\right)$
\end_inset

 with 
\begin_inset Formula $V=\left\{ v_{1}\right\} $
\end_inset

 and 
\begin_inset Formula $E=\left\{ \left(v_{1},v_{2}\right)\right\} $
\end_inset

 is 
\emph on
not
\emph default
 a graph, because 
\begin_inset Formula $v_{2}$
\end_inset

 is missing from the set 
\begin_inset Formula $V$
\end_inset

.
 Of course, we could implicitly include 
\begin_inset Formula $v_{2}$
\end_inset

 in the collection of vertexes, but this is not 
\begin_inset Quotes eld
\end_inset

natural
\begin_inset Quotes erd
\end_inset

, if one is taking the germs of the seeds to define the vertexes of the
 graph.
\end_layout

\begin_layout Standard
Thus, given a seed, each edge in that seed has one 
\begin_inset Quotes eld
\end_inset

connected
\begin_inset Quotes erd
\end_inset

 endpoint, and one 
\begin_inset Quotes eld
\end_inset

unconnected
\begin_inset Quotes erd
\end_inset

 endpoint.
 The 
\begin_inset Quotes eld
\end_inset

connected
\begin_inset Quotes erd
\end_inset

 endpoint is that endpoint that is 
\begin_inset Formula $v$
\end_inset

.
 The other endpoint will commonly be called the 
\noun on
connector
\noun default
; equivalently, the edge can be taken to be the connector.
 Perhaps it should be called a half-edge, as one end-point is specified,
 but missing.
\end_layout

\begin_layout Standard
The seed can be visualized as a ball, with a bunch of sticks sticking out
 of it.
 A burr one might collect on one's clothing.
 One can envision a seed as an analog of an open set in topology: the center
 (the germ) is part of the set, and then there's some more, but the boundary
 is not part of the set.
 The vertexes on the unconnected ends of the edges are not a part of the
 seed.
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A seed
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename seed.eps
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Just as one can cover a topological space with a collection of open sets,
 so one can also cover a graph with seeds.
 This analogy is firm: if one has open sets 
\begin_inset Formula $U_{i}$
\end_inset

 and 
\begin_inset Formula $U_{j}$
\end_inset

 and 
\begin_inset Formula $U_{i}\cap U_{j}\ne\emptyset$
\end_inset

 then one can take 
\begin_inset Formula $U_{i}$
\end_inset

 and 
\begin_inset Formula $U_{j}$
\end_inset

 to be vertices, and 
\begin_inset Formula $U_{i}\cap U_{j}$
\end_inset

 to be an edge running between them.
\end_layout

\begin_layout Standard
More definitions are needed to advance the ideas of connecting and covering.
\end_layout

\begin_layout Definition*
A 
\noun on
section
\noun default
 is a set of seeds.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
It should be clear that a graph 
\begin_inset Formula $G$
\end_inset

 can be expressed as section; that section has the nice property that all
 of the germs appear once (and only once) in the set 
\begin_inset Formula $V$
\end_inset

 of 
\begin_inset Formula $G$
\end_inset

, and that all of the edges in 
\begin_inset Formula $E$
\end_inset

 appear twice, once each in two distinct seeds.
 This connectivity property motivates the following definition: 
\end_layout

\begin_layout Definition*
Given a section 
\begin_inset Formula $S$
\end_inset

, a 
\noun on
link
\noun default
 is any edge 
\begin_inset Formula $\left(v_{1},v_{2}\right)$
\end_inset

 where both 
\begin_inset Formula $v_{1}$
\end_inset

 and 
\begin_inset Formula $v_{2}$
\end_inset

 appear as germs of seeds in 
\begin_inset Formula $S$
\end_inset

.
 Two seeds are 
\noun on
connected
\noun default
 when there is a link between them.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Two linked (connected) seeds
\end_layout

\end_inset


\begin_inset Graphics
	filename seeds-two.eps
	width 45col%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

The use of links allows the concepts of paths and connectivity, taken from
 graph theory, to be imported into the current context.
 Thus, one can obviously define:
\end_layout

\begin_layout Definition*
A 
\noun on
connected section
\noun default
, or a 
\noun on
contiguous section
\noun default
 is a section where every germ is connected to every other germ via a path
 through the edges.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
In graph theory, this would normally be called a 
\begin_inset Quotes eld
\end_inset

connected graph
\begin_inset Quotes erd
\end_inset

, but we cannot fairly call it that because the seeds and sections were
 defined in such a way that they are not graphs in and of themselves; they
 only become graphs when they are fully connected.
 Never-the-less, it is fairly safe and straight-forward to apply common
 concepts from graph-theory.
 Sections are almost like graphs, but not quite.
\end_layout

\begin_layout Standard
Note that there are two types of edges in a section: those edges that connect
 to nothing, and those edges that connect to other seeds in that section.
 Henceforth, the unconnected edges will be called connectors (as defined
 above), while the fully-connected edges will be called links (also defined
 above).
 Connectors can be thought of as a kind-of half-edge: incomplete, missing
 the far end, while links are fully connected, whole.
\end_layout

\begin_layout Standard
Seeds and sections can (and should!) be visualized as hedgehogs - a body
 with spines sticking out of it - the connectors can be thought of as the
 spiny bits sticking out, waiting to make a connection, while the hedgehog
 body is that collection of vertices and the fully-connected links between
 them.
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A connected section
\end_layout

\end_inset


\begin_inset Graphics
	filename hedgehog.eps
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Implicit in the above definitions was that, during link formation, an edge
 is only allowed to connect to another seed if and only if the connector
 matches the germ.
 That is, if 
\begin_inset Formula $\left(v_{1},v_{2}\right)$
\end_inset

 is an edge rooted in the seed for 
\begin_inset Formula $v_{1}$
\end_inset

 and if 
\begin_inset Formula $\left(v_{3},v_{4}\right)$
\end_inset

 is an edge rooted in the seed for 
\begin_inset Formula $v_{3}$
\end_inset

, then these two can form a link if and only if 
\begin_inset Formula $v_{2}=v_{3}$
\end_inset

 and 
\begin_inset Formula $v_{4}=v_{1}$
\end_inset

.
 That is, the connectors are typed: they can only connect to seeds that
 are of the same type as the unconnected end of the edge.
\end_layout

\begin_layout Standard
This motivates a different way of looking at seeds: they can be visualized
 as jigsaw puzzle pieces, where any given tab on one jigsaw piece can fit
 into one and only one slot on another jigsaw piece.
 This union of a tab+slot is the link.
 The types of the connectors will later be seen to be the same thing as
 the types of type theory; that is, they are bona-fide types.
\end_layout

\begin_layout Subsection*
Why sections?
\end_layout

\begin_layout Standard
Whats the point of introducing this seemingly non-standard approach to something
 that looks a lot like graph theory? There are several reasons.
\end_layout

\begin_layout Itemize
From a computational viewpoint, sections have nice properties that a list
 of vertexes and edges do not.
 Given a single seed, one 
\begin_inset Quotes eld
\end_inset

instantly
\begin_inset Quotes erd
\end_inset

 know 
\emph on
all
\emph default
 of the edges attached to its germ: they are listed right there.
 By contrast, given only a graph description, one has to search the entire
 list 
\begin_inset Formula $E$
\end_inset

 for any edges that might contain the given vertex.
 Computationally, searching large lists is inefficient, especially so for
 very large graphs.
\end_layout

\begin_layout Itemize
The subset of a section is always a section.
 This is not the case for a graph: given 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

, some arbitrary subset of 
\begin_inset Formula $V$
\end_inset

 and some arbitrary subset of 
\begin_inset Formula $E$
\end_inset

 do not generally form a graph; one has to apply consistency conditions
 to get a subgraph.
\end_layout

\begin_layout Itemize
A connected section behaves very much like a seed: just as two seeds can
 be linked together to form a connected section, so also two connected sections
 can be linked together to form a larger connected section.
 Both have a body, with spines sticking out.
 The building blocks, and the things built from them have the same properties,
 lie in the same class.
 Thus, one has a system that is 
\begin_inset Quotes eld
\end_inset

scalable
\begin_inset Quotes erd
\end_inset

, and allows notions of similarity and scale invariance to be explored.
\end_layout

\begin_layout Itemize
Readers familiar with link-grammar should have by now instantly recognized
 seeds as being more or less the same thing as 
\begin_inset Quotes eld
\end_inset

disjuncts
\begin_inset Quotes erd
\end_inset

 in link-grammar.
 However, link-grammar disjuncts are a bit more complicated than seeds;
 this is the topic of the next section.
\end_layout

\begin_layout Itemize
In certain ways, the connectors on a seed look like the uncontracted indexes
 on a tensor.
 That is, a seed with 
\begin_inset Formula $n$
\end_inset

 connectors on it looks like a tensor of order 
\begin_inset Formula $n$
\end_inset

.
 A link looks like a pair of indexes that have been contracted.
 Tensors have additional properties that seeds do not have; however, the
 notion of connecting together connectors to form links means that many
 of the notions from a tensor algebra can be carried over into the current
 context.
 This includes, at least partly, the notion that a tensor category describes
 the algebra of sections.
\end_layout

\begin_layout Itemize
The analogy between graphs and topology, specifically, between open sets
 and seeds, the intersection of open sets and edges, allows concepts and
 tools to be borrowed from algebraic topology.
\end_layout

\begin_layout Standard
If we stop here, not much is accomplished, other than to define a somewhat
 idiosyncratic view of graph theory.
 But that is not the case; the concept of seeds and sections are needed
 to construct a concept of sheaves, which is being pursued so as to provide
 a tool to study natural language and other systems.
 
\end_layout

\begin_layout Section*
Clustering
\end_layout

\begin_layout Standard
The intended interpretation of the graph is that it represents a large amount
 of collected raw data.
 From this data, one wants to extract commonalities and recurring patterns.
 Doing so, one arrives at the need to perform a kind of quotienting operation
 on the graph.
 
\end_layout

\begin_layout Standard
To motivate this, consider the following scenario.
 One has a large graph, some dense mesh, and one decides, via some external
 decision process, that two vertexes are similar.
 One particularly good reason to think that they are similar is that they
 share a lot of nearest neighbors.
 In a social graph, one might say they have a lot of friends in common.
 In genomic or proteomic data, they may interact with the same kinds of
 genes/proteins.
 In natural language, they might be words that are synonyms, and thus get
 used the same way across many different sentences; specifically, the syntactic
 dependency parse links these words to the same set of heads and dependents.
 At any rate, one has a large graph, and some sort of equivalence operation
 that can decide if two vertexes are the 
\begin_inset Quotes eld
\end_inset

same
\begin_inset Quotes erd
\end_inset

, or are 
\begin_inset Quotes eld
\end_inset

similar enough
\begin_inset Quotes erd
\end_inset

.
 Whenever one has an equivalence relation, one can apply it to obtain a
 quotient, of grouping together into an identity all things that are the
 same.
\end_layout

\begin_layout Standard
In graph theory, there is a notion of quotienting, but it is not quite the
 same as what will be defined shortly.
 In graph theory, when working with quotients, one will typically consider
 a graph 
\begin_inset Formula $G$
\end_inset

 relative to some subgraph 
\begin_inset Formula $A\subset G$
\end_inset

.
 One effectively 
\begin_inset Quotes eld
\end_inset

draws a dotted line
\begin_inset Quotes erd
\end_inset

 or places a balloon around the vertexes in 
\begin_inset Formula $A$
\end_inset

, but preserves all of the edges coming out of 
\begin_inset Formula $A$
\end_inset

 and going into 
\begin_inset Formula $G$
\end_inset

.
 The internal structure of 
\begin_inset Formula $A$
\end_inset

 is then typically ignored, discarded; not out of spite, but because that
 is the nature of an equivalence relation: it states that all elements of
 
\begin_inset Formula $A$
\end_inset

 are 
\begin_inset Quotes eld
\end_inset

equal
\begin_inset Quotes erd
\end_inset

, are 
\begin_inset Quotes eld
\end_inset

equivalent
\begin_inset Quotes erd
\end_inset

, are one and the same, and thus 
\begin_inset Formula $A$
\end_inset

 behaves as if it were a single vertex, with assorted edges attached to
 it, running from 
\begin_inset Formula $A$
\end_inset

 to the rest of 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Standard
By contrast, the goal here is not just to talk about a graph 
\begin_inset Formula $G$
\end_inset

 relative to a single 
\begin_inset Formula $A$
\end_inset

, but relative to a huge number of different 
\begin_inset Formula $A$
\end_inset

's.
 What's more, the internal structure of these 
\begin_inset Formula $A$
\end_inset

's will continue to be interesting, and so is carried onwards.
 Finally, the act of merging together multiple vertexes into one 
\begin_inset Formula $A$
\end_inset

 may result in some of the existing edges being cut, or new edges being
 created.
 The clustering operation applied to the graph alters the graph structure.
 These considerations are what makes it convenient to abandon traditional
 graph theory, and to replace it by the notion of sheaves and sections.
\end_layout

\begin_layout Standard
Given two vertexes 
\begin_inset Formula $v_{a}$
\end_inset

 and 
\begin_inset Formula $v_{b}$
\end_inset

, let 
\begin_inset Formula $s_{a}$
\end_inset

 and 
\begin_inset Formula $s_{b}$
\end_inset

 be the corresponding seeds, as defined previously.
 That is, 
\begin_inset Formula $s=\left(v,E_{v}\right)$
\end_inset

 with 
\begin_inset Formula $E_{v}$
\end_inset

 being the set of edges connecting 
\begin_inset Formula $v$
\end_inset

 to all of its nearest neighbors.
 Consider now creating the object 
\begin_inset Formula $\left(\left\{ v_{a},v_{b}\right\} ,E_{ab}\right)$
\end_inset

.
 This is no longer a seed, as the first item is no longer a single vertex,
 but a set of vertexes.
 The set 
\begin_inset Formula $E_{ab}$
\end_inset

 is still a set of edges, depending on the two initial sets of edges 
\begin_inset Formula $E_{a}$
\end_inset

 and 
\begin_inset Formula $E_{b}$
\end_inset

.
 The precise definition of 
\begin_inset Formula $E_{ab}$
\end_inset

 is not given: it might be the union of 
\begin_inset Formula $E_{a}$
\end_inset

 and 
\begin_inset Formula $E_{b}$
\end_inset

, or the intersection, or some other function.
 In general, one writes 
\begin_inset Formula $E_{ab}=f\left(E_{a},E_{b}\right)$
\end_inset

 for some function 
\begin_inset Formula $f$
\end_inset

.
 The result of creating this object is no longer strictly a graph, at least,
 not in the natural sense (one can force a graph structure onto the result,
 but doing so gets awkward).
 The mashing together of two vertexes creates a kind of a quotient, as described
 above.
 This quotient will be called a stalk in what follows.
\end_layout

\begin_layout Definition*
A 
\noun on
stalk
\noun default
 is an ordered pair 
\begin_inset Formula $S=\left(V,E\right)$
\end_inset

 of vertexes and edges such that every edge in 
\begin_inset Formula $E$
\end_inset

 has one endpoint being a vertex in 
\begin_inset Formula $V$
\end_inset

 and the other endpoint being a vertex not in 
\begin_inset Formula $V$
\end_inset

.
 That is, each edge in 
\begin_inset Formula $E$
\end_inset

 is a connector, and no edge in 
\begin_inset Formula $E$
\end_inset

 is a link (back into 
\begin_inset Formula $V)$
\end_inset

.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
This definition of a stalk is meant to be a straight-forward generalization
 of the previously defined seed, replacing the germ vertex by a germ that
 is a set of vertexes.
 Stalks can be linked together, much as seeds are:
\end_layout

\begin_layout Definition*
A 
\noun on
link
\noun default
 between two different stalks 
\begin_inset Formula $S_{a}=\left(V_{a},E_{a}\right)$
\end_inset

 and 
\begin_inset Formula $S_{b}=\left(V_{b},E_{b}\right)$
\end_inset

 is any edge 
\begin_inset Formula $e=\left(v_{1},v_{2}\right)$
\end_inset

 running between them, 
\emph on
viz.

\emph default
 where 
\begin_inset Formula $v_{1}\in V_{a}$
\end_inset

 and 
\begin_inset Formula $v_{2}\in V_{b}$
\end_inset

 and 
\begin_inset Formula $e\in E_{a}$
\end_inset

 and 
\begin_inset Formula $e\in E_{b}$
\end_inset

.
 Two stalks are 
\noun on
connected
\noun default
 when there are one or more links between them.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
It is convenient (it is suggested) that the vertexes in the stalk be visualized
 as being stacked one on top another, forming a tower or a fiber, with the
 edges sticking out as spines.
 Perhaps one can visualize a kind-of melted stack of jigsaw-puzzle pieces.
 This visualization is suggested only to enforce the idea that two different
 stalks project down to two different base-points.
 In particular, one now can have the notion of a meta-graph where each stalk
 is a vertex, and each link is an edge.
 That is, if one flattens the meta-graph down to two dimensions, then one
 can imagine a stalk growing up as a pole above each meta-vertex, and each
 meta-edge as being the projection of a link between two stalks.
 To maintain consistency with standard mathematical terminology, this meta-graph
 should really be called a 
\begin_inset Quotes eld
\end_inset

base space
\begin_inset Quotes erd
\end_inset

, and the stalks and links project down onto it in the usual sense.
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A stalk and it's projection
\end_layout

\end_inset


\begin_inset Graphics
	filename stalk.eps
	width 60col%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The projection down to a base space suggests that the equivalence relation
 on vertexes can be extended to an equivalence relation on edges: two edges
 are equivalent if they form the same link.
 That is, one has an equivalence class of edges:
\end_layout

\begin_layout Definition*
A 
\noun on
link
\noun default
 between two different stalks 
\begin_inset Formula $S_{a}=\left(V_{a},E_{a}\right)$
\end_inset

 and 
\begin_inset Formula $S_{b}=\left(V_{b},E_{b}\right)$
\end_inset

 is the set 
\begin_inset Formula $l=\left\{ e_{k}\right\} $
\end_inset

 of all edges 
\begin_inset Formula $e_{k}$
\end_inset

 that connect some pair of vertexes in 
\begin_inset Formula $V_{a}$
\end_inset

 and 
\begin_inset Formula $V_{b}$
\end_inset

.
 That is, every 
\begin_inset Formula $e_{k}=\left(v_{k1},v_{k2}\right)$
\end_inset

 in 
\begin_inset Formula $L$
\end_inset

 has the property that 
\begin_inset Formula $v_{k1}\in V_{a}$
\end_inset

 and 
\begin_inset Formula $v_{k2}\in V_{b}$
\end_inset

 and 
\begin_inset Formula $e_{k}\in E_{a}$
\end_inset

 and 
\begin_inset Formula $e_{k}\in E_{b}$
\end_inset

.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
This redefines the notion of a link.
 Perhaps it should be given a different name, but it should be OK, because
 the intended sense should be clear from the context.
 This allows us to redefine the notion of a stalk as well:
\end_layout

\begin_layout Definition*
A 
\noun on
stalk
\noun default
 is an ordered pair 
\begin_inset Formula $S=\left(V,L\right)$
\end_inset

 of vertexes and links such that every link in 
\begin_inset Formula $L$
\end_inset

 has one endpoint that is 
\begin_inset Formula $V$
\end_inset

 and the other endpoint not being 
\begin_inset Formula $V$
\end_inset

.
 That is, each link in 
\begin_inset Formula $L$
\end_inset

 is a connector or half-edge.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
The above definition renders the stalk as being essentially the same thing
 as a seed, except that now, one is working with sets of vertices, and the
 links between them.
 One can think of this structure as a kind of hypergraph, but that view
 does not seem to be particularly productive.
\end_layout

\begin_layout Subsection*
Why clustering?
\end_layout

\begin_layout Standard
The above establishes a vocabulary, a means for talking about the clustering
 of similar things on graphs.
 It does not suggest how to cluster.
 Without this vocabulary, it can be very confusing to visualize and talk
 about what is meant by clustering on a graph.
 Its worth reviewing some examples.
\end_layout

\begin_layout Itemize
In a social graph, a cluster might be a clique of friends.
 By placing these friends into one group, the stalk allows you to examine
 how different groups interact with one-another.
\end_layout

\begin_layout Itemize
In proteomic or genomic data, if one can group together similar proteins
 or genes into clusters, one can accomplish a form of dimensional reduction,
 decreasing the overall size of the dataset.
 It provides a methodical way of creating a simplified model of biology,
 without the bad smell of ad-hoc simplifications.
\end_layout

\begin_layout Itemize
In linguistic data, the natural clustering is that of words that behave
 in a similar syntactic fashion; such clusters are commonly called 
\begin_inset Quotes eld
\end_inset

grammatical classes
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

parts of speech
\begin_inset Quotes erd
\end_inset

.
 In particular, it allows one to visualize language as a graph.
 So: consider, for example, the set of all dependency parses of all sentences
 in some corpus, say Wikipedia.
 Each dependency parse is a tree; the vertexes are words, and the edges
 are the dependencies.
 Taken as a graph, this is a huge graph, with words connecting to other
 words, all over the place.
 Its not terribly interesting in this raw state, because its overwhelmingly
 large.
 However, we might notice that all sentences containing the word 
\begin_inset Quotes eld
\end_inset

dish
\begin_inset Quotes erd
\end_inset

 resemble all sentences containing the word 
\begin_inset Quotes eld
\end_inset

plate
\begin_inset Quotes erd
\end_inset

; that these two words always get used in a similar or the same way.
 Grouping these two words together into one reduces the size of the graph
 by one vertex.
 Aggressively merging similar words together can sharply shrink the size
 of the graph to a manageable size.
 One gets something more: the resulting graph can be understood as encapsulating
 the structure of the English language.
 
\end_layout

\begin_layout Standard
This last example is worth expanding on.
 Two things happen when the compressed graph is created.
 First, that graph encodes the syntactic structure of the language: the
 links between grammatical classes indicate how words can be arranged into
 grammatically correct sentences.
 Second, the amount of compression applied can reveal different kinds of
 structures.
 With extremely heavy compression, one might discover only the crudest parts
 of speech: determiners, adjectives, nouns, transitive and intransitive
 verbs.
 Each of these classes are distinct, because they link differently.
 However, if instead, a lot less compression is applied, then one can discover
 synonymous words: so, 
\begin_inset Quotes eld
\end_inset

plate
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

dish
\begin_inset Quotes erd
\end_inset

 might be grouped together, possibly with 
\begin_inset Quotes eld
\end_inset

saucer
\begin_inset Quotes erd
\end_inset

, but not with 
\begin_inset Quotes eld
\end_inset

cup
\begin_inset Quotes erd
\end_inset

.
 Here, one is extracting a semantic grouping, rather than a syntactic grouping.
 
\end_layout

\begin_layout Standard
So, the answer to 
\begin_inset Quotes eld
\end_inset

why clustering?
\begin_inset Quotes erd
\end_inset

 is that it allows information to be extracted from a graph, and encoded
 in a useful, usable fashion.
 No attempt is made here to suggest how to cluster; merely, that if an equivalen
ce relation is available, and if it is employed wisely, then one can construct
 quotient graphs that encode important relationships of the original, raw
 graph.
\end_layout

\begin_layout Section*
Types
\end_layout

\begin_layout Standard
It is notationally awkward to have to write stalks in terms of the sets
 of vertexes that they are composed of; it is convenient to instead replace
 each set by a symbol.
 The symbol will be called a 
\noun on
type
\noun default
.
 As it happens, these types can be seen to be the same things occurring
 in the study of type theory; the name is justified.
\end_layout

\begin_layout Standard
The core idea can be illustrated with link-grammar as an example.
 The link-grammar disjuncts 
\emph on
are
\emph default
 one and the same thing as stalks.
 It is worth making this very explicit.
 A subset of the link-grammar English dictionary looks like this:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
cat dog: D- & S+;
\end_layout

\begin_layout Plain Layout

\family sans
the a: D+;
\end_layout

\begin_layout Plain Layout

\family sans
ran: S-;
\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Newline newline
\end_inset

This states that 
\begin_inset Quotes eld
\end_inset

cat
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

dog
\begin_inset Quotes erd
\end_inset

 are both vertexes, and they are in the same stalk.
 That stalk has two connectors: 
\family sans
D-
\family default
 and 
\family sans
S+
\family default
, which encode the other stalks that can be connected to.
 So, the 
\family sans
D+
\family default
 can be connected to the 
\family sans
D-
\family default
 to form a link.
 The link has the form 
\family sans
({the, a}, {cat, dog})
\family default
 and the connector symbols 
\family sans
D+
\family default
 and 
\family sans
D-
\family default
 act as abbreviations for the vertex sets that the unconnected end can connect
 to.
 The + and - symbols indicate a directionality: to the right or to the left.
 The capture the notion that, in English, the word-order matters.
 To properly explain the + and -, we should have to go back to the definition
 of a graph on the very first page, and introduce the notion of left-right
 order among the vertices.
 Doing so from the very beginning would do nothing but clutter up the presentati
on, so that is not done.
 The reader is now invited to treat the initial definition of the graph
 as a monad: there are additional details 
\begin_inset Quotes eld
\end_inset

under the covers
\begin_inset Quotes erd
\end_inset

, but they are wrapped up and ignored, and only the relevant bits are exposed.
 Perhaps the vertices had a color.
 Perhaps they had a name, or a numerical weight; this is ignored.
 Here, we unwrap the idea that the vertices must be organized in a left-right
 order.
 Its sufficient, for now, to leave it at that.
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Three stalks and two typed links
\end_layout

\end_inset


\begin_inset Graphics
	filename grammar.eps
	width 45col%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The three stalks here encode a set of grammatically valid English language
 sentences.
 Hooking together the S- and S+ connectors to form an S link, one obtains
 the sequence 
\family sans
[{the, a} {cat, dog} {ran}]
\family default
.
 This can be used to generate grammatically valid sentences: pick one word
 from each set, and one gets a valid sentence.
 Alternatively, this structure can be taken to encode the sum-total knowledge
 about this toy language: it is a kind-of graphical representation of the
 entire language, viewed as a whole.
\end_layout

\begin_layout Definition*
Given a stalk 
\begin_inset Formula $S=\left(V,L\right)$
\end_inset

, the 
\noun on
connector type
\noun default
 of 
\begin_inset Formula $L$
\end_inset

 is a symbol that can be used as a synonym for the set 
\begin_inset Formula $L$
\end_inset

.
 It serves as a short-hand notation for 
\begin_inset Formula $L$
\end_inset

 itself.
 
\begin_inset Formula $\diamond$
\end_inset


\end_layout

\begin_layout Standard
Just as in type theory, a type can be viewed a set.
 Yet, just as in type theory, this is the wrong viewpoint: a type is better
 understood as expressing a property: it is an intensional, rather than
 an extensional description.
 Formally, in the case of finite sets, this may feel like splitting hairs.
 For an intuitive understanding, however, its useful to think of a type
 as a property carried by an object, not just the class that the object
 can be assigned to.
\end_layout

\begin_layout Subsection*
Why types? 
\end_layout

\begin_layout Standard
Types are introduced here primarily as a convenience for working with stalks.
 They are labels, but they can be useful.
 Re-examining the examples:
\end_layout

\begin_layout Itemize
In a social graph, one group of friends might be called 
\begin_inset Quotes eld
\end_inset

students
\begin_inset Quotes erd
\end_inset

 and another group of friends might be called 
\begin_inset Quotes eld
\end_inset

teachers
\begin_inset Quotes erd
\end_inset

.
 The class labels are useful for noting the function and relationship of
 the different social groups.
\end_layout

\begin_layout Itemize
In genomic data, one type of gene sequence might be classified as an exon,
 another as an intron.
\end_layout

\begin_layout Standard
These examples suggest that the use of types is little more than a convenient
 labeling system.
 In fact, more hay can be made here, as types interact strongly with category
 theory: types are used to describe the internal language of monoidal categories.
 But this is a rather abstract viewpoint, of no immediate short-term use.
 Suffice it to say that appearance of types in grammatical analysis of a
 language is not accidental.
 
\end_layout

\begin_layout Section*
Parsing
\end_layout

\begin_layout Standard
The introduction remarked that not every collection of seeds can be assembled
 in such a way as to create a valid graph.
 This idea can be firmed up, and defined more carefully.
 Generically, a valid assembly of seeds is called a parse, and the act of
 assembling them is called parsing, which is done by parse algorithms.
 To illustrate the process, consider the following two seeds:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \qquad{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula $v_{2}:\left\{ \left(v_{2},v_{1}\right),\left(v_{2},v_{3}\right)\right\} $
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $v_{3}:\left\{ \left(v_{3},v_{2}\right)\right\} $
\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Represented graphically, these seeds are
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Two unconnected seeds
\end_layout

\end_inset


\begin_inset Graphics
	filename bad-graph.eps
	width 55col%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

The connector (half-edge) 
\begin_inset Formula $\left(v_{2},v_{3}\right)$
\end_inset

 appears with both polarities, and can be linked together to form a link.
 The connector 
\begin_inset Formula $\left(v_{2},v_{1}\right)$
\end_inset

 has nothing to connect to.
 Even after maximally linking these two seeds, one does not obtain a valid
 graph: the vertex 
\begin_inset Formula $v_{1}$
\end_inset

 is missing from the vertex-set of the graph, even though there is an edge
 ready to attach to it.
 This provides an example of a failed parse.
 It is enough to add the seed 
\begin_inset Formula $v_{1}:\left\{ \left(v_{1},v_{2}\right)\right\} $
\end_inset

 to convert this into a successful parse.
 Adding this seed, and then attempting to maximally link it results in a
 valid graph; the parse is successful.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Parsing is the creation of links
\end_layout

\end_inset


\begin_inset Graphics
	filename parsing.eps
	width 45col%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the minor change in notation: the colon is used as a separator, with
 the germ appearing on the left, and set of connectors on the right.
 The relevance of this notational change becomes more apparent, if we label
 the vertexes in a funny way: let 
\begin_inset Formula $v_{1}$
\end_inset

 carry the lable 
\begin_inset Quotes eld
\end_inset

the
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Formula $v_{2}$
\end_inset

 carry the label 
\begin_inset Quotes eld
\end_inset

dog
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Formula $v_{3}$
\end_inset

 carry the label 
\begin_inset Quotes eld
\end_inset

ran
\begin_inset Quotes erd
\end_inset

.
 The failed parse is meant to illustrate that 
\begin_inset Quotes eld
\end_inset

dog ran
\begin_inset Quotes erd
\end_inset

 is not a grammatically valid sentence, whereas 
\begin_inset Quotes eld
\end_inset

the dog ran
\begin_inset Quotes erd
\end_inset

 is.
 
\end_layout

\begin_layout Standard
Converting these seeds to also enforce left-right word-order requires the
 notation
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \qquad{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
the: {(the, dog+)}
\end_layout

\begin_layout Plain Layout

\family sans
dog: {(dog, the-), (dog,ran+)}
\end_layout

\begin_layout Plain Layout

\family sans
ran: {(ran, dog-)}
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
This notation is verbose, and slightly confusing.
 Repeating the germ as the first vertex in every connector is entirely un-necces
sary.
 Write instead:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \qquad{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
the: { dog+ }
\end_layout

\begin_layout Plain Layout

\family sans
dog: { the-, ran+}
\end_layout

\begin_layout Plain Layout

\family sans
ran: { dog- }
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
The set-builder notation is un-needed, and perhaps slightly confusing.
 In particular, the word 
\begin_inset Quotes eld
\end_inset

dog
\begin_inset Quotes erd
\end_inset

 has two connectors on it; both must be connected to obtain a valid parse.
 The ampersand can be used to indicate the requirement that both connectors
 are required.
 This notation will also be useful in the next section.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \qquad{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
the: dog+ ;
\end_layout

\begin_layout Plain Layout

\family sans
dog: the- & ran+ ;
\end_layout

\begin_layout Plain Layout

\family sans
ran: dog- ;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
This brings us almost back to the previous section, but not quite.
 Here, we are working with seeds; previously we worked with stalks.
 Here, the connector type labels were not employed.
 In real-world use-cases, using stalks and type labels is much more convenient.
\end_layout

\begin_layout Standard
This now brings us to a first draft of a parse algorithm.
 Given an input set of vertices, it attempts to find a graph that is able
 to connect all of them.
\end_layout

\begin_layout Enumerate
Provide a dictionary 
\begin_inset Formula $D$
\end_inset

 consisting of a set of un-connected stalks.
 
\end_layout

\begin_layout Enumerate
Input a set of vertices 
\begin_inset Formula $V=\left\{ v_{1},v_{2},\cdots,v_{k}\right\} $
\end_inset

.
 
\end_layout

\begin_layout Enumerate
For each vertex in 
\begin_inset Formula $V$
\end_inset

, locate a stalk which contains that vertex in it's germ.
\end_layout

\begin_layout Enumerate
Attempt to connect all connectors in the selected stalks.
\end_layout

\begin_layout Enumerate
If all connectors can be connected, the parse is successful; else the parse
 fails.
\end_layout

\begin_layout Enumerate
Print the resulting graph.
 This graph can be described as a pair 
\begin_inset Formula $\left(V,E\right)$
\end_inset

 with 
\begin_inset Formula $V$
\end_inset

 the input set of vertexes, and 
\begin_inset Formula $E$
\end_inset

 the set of links obtained from fully connecting the selected stalks.
\end_layout

\begin_layout Standard
The above algorithm is 
\begin_inset Quotes eld
\end_inset

generic
\begin_inset Quotes erd
\end_inset

, and does not suggest any optimal strategy for the crucial steps 3 or 4.
 It also omits discussion of any further constraints that might need to
 be applied: perhaps the edges need to be directed; perhaps the resulting
 graph must be a planar graph (no intersecting edges); perhaps the graph
 must be a minimum spanning tree; perhaps the input vertexes must be arranged
 in linear order.
 These are additional constraints that will typically be required in some
 specific application.
\end_layout

\begin_layout Subsection*
Why parsing?
\end_layout

\begin_layout Standard
The benefit of parsing for the analysis of the structure of natural language
 is well established.
 Thus, an example of parsing in a non-linguistic domain is useful.
 Consider having used the above graph compression/vertex-edge clustering
 techniques to obtain a collection of stalks that describe genomic interactions.
 This collection provides the initial dictionary 
\begin_inset Formula $D$
\end_inset

.
 Now imagine a process where a certain specific set of genes are associated
 with some particular trait or reaction.
 Is this a complete set? Can it be said that thier interactions are fully
 understood?
\end_layout

\begin_layout Standard
One way to answer these last two questions would be to apply the parse algorithm
, using the known dictionary, to see if a complete interaction network can
 be obtained.
 If so, then this new specific gene-set fits the general pattern.
 If not, if a complete parse cannot be found, then one strongly suspects
 that there remain one or more genes, yet undetermined, that also play a
 role in the trait.
 To find these, one might examine the stalks that might have been required
 to complete the parse: these will give a specific type of gene, or style
 of interaction to search for.
\end_layout

\begin_layout Standard
Thus, parsing new gene expressions and pathways offers a way of discovering
 whether they resemble existing, known systems, or whther they are truly
 novel.
 If they seem novel, parsig also gives strong hints as to where to look
 for any missing pieces or interactions.
\end_layout

\begin_layout Subsection*
Is this really parsing?
\end_layout

\begin_layout Standard
The above description of parsing is sufficiently different from standard
 textbook expositions of natural language parsing that some form of an apology
 neds to be written.
 
\end_layout

\begin_layout Standard
The first step is to observe that the presented algorithm is essentially
 a simplified, generalized variation of the link-grammar parsing algorithm.
 The generalization consists in the removal of word-order and link-crossing
 constraints.
\end_layout

\begin_layout Standard
The second step is to observe that the theory of link-grammar is more-or-less
 isomorphic to the theory of pregroup grammars (see 
\begin_inset CommandInset href
LatexCommand href
name "Wikipedia"
target "https://en.wikipedia.org/wiki/Pregroup_grammar"

\end_inset

); the primary differences being notational.
 The left-right directional link-grammar connectors correspond to the left
 and right adjoints in a pregroup.
 A link-grammar disjunct (that is, a seed) coresponds to a sequence of types
 in a pregroup grammar.
 The correspondance is more-or-less direct, except that link grammar is
 notational simpler to work with.
\end_layout

\begin_layout Standard
The third step is to observe that the link-grammar is a form of dependency
 grammar.
 Although the original link-grammar formulation uses undirected links, it
 is straight-forward and unambiguous to mark up the links with head-dependent
 directional arrows.
\end_layout

\begin_layout Standard
The fourth step is to realize that dependency grammars (DG) and head-phrase-stru
cture grammars (HPSG) are essentially isomorphic.
 Given one, one can obtain the other in a purely mechanistic way.
 
\end_layout

\begin_layout Standard
The final step is to realize that most introductory textbooks describe parsers
 for a context-free grammar, and that, for general instructional purposes,
 such parsers are sufficient to work with HPSG.
 The priamry issue with HPSG and context-free language parsers is that they
 obscure the notion of linking together pieces; this is one reason why dependenc
y grammars are oftan favored: they make clear that it is the linkage between
 various words that has a primary psychological role in the human understanding
 of language.
 It should be noted that many researchers in the psychology of linguistics
 are particularly drawn to the categorial grammars; these are quite similar
 to the pregroup grammars, and are more closely related to link-grammar
 than to the phrase-structure grammars.
\end_layout

\begin_layout Section*
Polymorphism
\end_layout

\begin_layout Standard
Any given vertex may participate in two or more seeds, independently from
 one-another.
 It is this statement that really starts setting apart the system described
 here from ordinary graph theory.
 It is best illustrated by a practical example.
\end_layout

\begin_layout Standard
Consider a large graph, constructed from a large corpus of English language
 sentences.
 As subgraphs, it might contain the two sentences 
\begin_inset Quotes eld
\end_inset

there's a fly on your nose
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

did you see it fly?
\begin_inset Quotes erd
\end_inset

.
 The vertex 
\begin_inset Quotes eld
\end_inset

fly
\begin_inset Quotes erd
\end_inset

 occurs as a noun in one sentence, and a verb in the other.
 Suppose that the equivalence relation, described in the clustering section,
 also has the power to discern that this one word should really be split
 into two namely 
\begin_inset Formula $fly_{\mbox{noun}}$
\end_inset

 and 
\begin_inset Formula $fly_{\mbox{verb}}$
\end_inset

, and placed into two different stalks, namely, in the 
\begin_inset Quotes eld
\end_inset

noun
\begin_inset Quotes erd
\end_inset

 stalk in the first case, and the 
\begin_inset Quotes eld
\end_inset

verb
\begin_inset Quotes erd
\end_inset

 stalk in the second.
 Recall that these two stalks must be different, because the kinds of connectors
 that are allowed on a noun must necessarily be quite different from those
 on a verb.
 One is then lead to the image shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Polymorphism"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Polymorphism
\begin_inset CommandInset label
LatexCommand label
name "fig:Polymorphism"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename polymorph.eps
	width 75col%

\end_inset


\end_layout

\begin_layout Plain Layout
This figure illustrates a polymorphic assignment for the word 
\begin_inset Quotes eld
\end_inset

fly
\begin_inset Quotes erd
\end_inset

.
 It is split into two parts, the first, a noun, classed with other nouns,
 showing labeled connectors to determiners, adjectives, and a connector
 showing that nouns can act as the subject of a verb.
 The second class shows labelled connectors to subjects and objects, as
 is appropriate for transitive verbs.
 Underneath are the flattened raw seeds, showing the words 
\begin_inset Quotes eld
\end_inset

fly
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

cat
\begin_inset Quotes erd
\end_inset

 and the myriad of connectors on them.
 The flattened seeds cannot lead to grammatical linkages, as they mash together
 into noe the connectors for different parst of speech.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Sheaves
\end_layout

\begin_layout Standard
The polymorphism issue above is what really drives the system to resemble
 a sheaf, as opposed to a simpler graphical theory.
\end_layout

\begin_layout Standard
present the sheaf axioms
\end_layout

\begin_layout Section*
Conclusion
\end_layout

\begin_layout Standard
XXX Wait – there's more to be written.
 This is just a save of an early draft.
 So, not the end, not yet.
\end_layout

\end_body
\end_document
