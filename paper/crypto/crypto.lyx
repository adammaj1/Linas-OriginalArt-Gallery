#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{url} 
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Crypto Sci-Club Notes
\end_layout

\begin_layout Abstract
Notes preparing for sci-club crypto-blockchain pesentation.
\end_layout

\begin_layout Section*
List of possible topics
\end_layout

\begin_layout Standard
Start with history, review of core tech concepts.
 Finish with applications.
\end_layout

\begin_layout Itemize
First large-scale use of blockchain was in WWII Enigma coding machines.
 Maybe explain how these work?
\end_layout

\begin_layout Itemize
Concept of mixing/entropy.
 Concept of mixing at different time-scales (slow, fast).
\end_layout

\begin_layout Itemize
Public key crypto mathematics theory
\end_layout

\begin_layout Itemize
Public key crypto examples: PGP/GPG, x.509 certs, SSL/https, onion routing
 described at general level
\end_layout

\begin_layout Itemize
crypto at a detailed level ratchet double ratchet, forward secrecy, what
 is it for, how does this work?
\end_layout

\begin_layout Itemize
Nonce; using nonces for secret boxes; all secret boxes must have a different
 nonce else there is no forward secrecy
\end_layout

\begin_layout Itemize
Merkle tree (hash tree): it doesn't have to be an actual chain; it can be
 a tree of chains, leading up to a signed root.
 Thus the dat:// protocol and btrfs, zfs
\end_layout

\begin_deeper
\begin_layout Itemize
Bitcoin has merkle trees inside of it; where? why?
\end_layout

\end_deeper
\begin_layout Itemize
Git as a blockchain, and why it was needed - to prevent source code fraud
 (real, not imagined - intentional covert, secret insertion of corruption/bugs
 into Linux kernel by unknown actors (possibly NSA??))
\end_layout

\begin_deeper
\begin_layout Itemize
Git is a blockchain of commits.
\end_layout

\begin_layout Itemize
Each commit is a Merkle tree of file-objects (blobs) that captures the state
 of that filesystem tree at that particular moment.
 
\end_layout

\end_deeper
\begin_layout Itemize
File sharing, sleepycat/napster, 
\end_layout

\begin_deeper
\begin_layout Itemize
Gnutella, BearShare, LimeWire, Shareaza, all use tiger tree hash
\end_layout

\end_deeper
\begin_layout Itemize
torrent architectures (bittorrent tracker is example of DHT) 
\end_layout

\begin_layout Itemize
Other weirdo crypto ideas: death-lottery.
\end_layout

\begin_layout Itemize
Forking and fork resolution.
 A fork prevents maintanance of state (e.g.
 maintance of bank balances) because in one fork, a withdrawl is made, and
 in another, there isn't (multiple accounting books).
 
\end_layout

\begin_layout Itemize
Forking is easy to solve, if there is a centralized authority (one set of
 books) – e.g.
 a bank.
 The bank is authoritative as to your bank account balance.
 
\end_layout

\begin_layout Itemize
Centralization has disdvantages: (a) snooping (b) high cost prohibits microtrans
actions (pennies)
\end_layout

\begin_layout Itemize
bitcoin predecessors: erights.org, how to do banking in a secure container
 by delegation.
 So, many small banks (purses) are possible.
 Trick is to keep each purse secure, honest.
 Possibly by cryptographical proving that the computations were actually
 performed.
\end_layout

\begin_layout Itemize
Distributed mutual exclusion protocols.
 https://www.cs.uic.edu/~ajayk/Chapter9.pdf Need: liveness (guaranteed forward
 progress), fairness (everyone gets a shot), safety (there is only one lockholde
r).
\end_layout

\begin_layout Itemize
Distributed mutual exclusion algorithms e.g.
 Lamports algorithm, 
\begin_inset Quotes eld
\end_inset

work
\begin_inset Quotes erd
\end_inset

, but only cooperatively, not in a hostile network.
\end_layout

\begin_layout Itemize
Byzantine generals i.e.
 hostile network
\end_layout

\begin_layout Itemize
Tangles aka 
\begin_inset Quotes eld
\end_inset

Observer Remove Conflict-Free Replicated Data type
\begin_inset Quotes erd
\end_inset

 (OR-Set CRDT)
\end_layout

\begin_deeper
\begin_layout Itemize
Like block chain, but DAG with root (genesis node); growing tip/tips, 
\end_layout

\begin_layout Itemize
As defense of cryptocurrency against attackers.
 https://www.iota.org/research/meet-the-tangle
\end_layout

\begin_layout Itemize
Cooperative tangles: OR-Set CRDT with vector clock: arXiv:1210.3368 
\end_layout

\begin_layout Itemize
nice diagrams: https://github.com/cn-uofbasel/ssbdrv/blob/master/doc/tangle.md
\end_layout

\end_deeper
\begin_layout Itemize
Bitcoin solves: (1) the forking problem (2) the Byzantine generals problem.
 
\end_layout

\begin_layout Itemize
Note that there's still 
\begin_inset Quotes eld
\end_inset

centralization
\begin_inset Quotes erd
\end_inset

 in bitcoin, just not central authority.
 There is only one growing tip in bitcoin.
 There are NOT multiple, distributed purses.
 Bitcoin 
\begin_inset Quotes eld
\end_inset

wallets
\begin_inset Quotes erd
\end_inset

 are NOT purses! They are not actually wallets, because they do not actually
 store the value – the value is on the bitcoin blockchain, and tehre is
 exactly zero value in the wallet itself.
 The wallets do store the secret keys, though.
\end_layout

\begin_layout Itemize
HashCash for spam prevention.
 Proof-of-work - computationally expensive operations.
\end_layout

\begin_layout Itemize
bitcoin as generic database
\end_layout

\begin_layout Itemize
bitcoin as a ledger: addition subtraction – thus, a transaction database.
\end_layout

\begin_layout Itemize
But also: multiplication, division, if-statements, loops, – Turing-complete;
 generic programming that is verifiable, unfalsifiable, non-repudiable –
 etherium.
 These properties make it strong enough for legal contracts!
\end_layout

\begin_deeper
\begin_layout Itemize
Etherium improvements e.g.
 rigorous mathematical proofs, from the (who were they?? I/O Hong Kong people?)
\end_layout

\end_deeper
\begin_layout Itemize
Problems with global blockchains:
\end_layout

\begin_deeper
\begin_layout Itemize
Global blockchains are heavy.
 Typically require all participants to store the entire chain -gigabytes
 worth and more.
 
\end_layout

\begin_layout Itemize
The problem with proof-of-work - wasteful of CPU power.
 
\end_layout

\begin_layout Itemize
Moral of the story: global blockchains represent a *single* centralized
 server.
 They represent a centralized resource in a distributed fashion.
 
\end_layout

\begin_layout Itemize
Originally, ostensibly, blockchain was to solve the banking problems of
 double-spending of coin.
 But the solution is sloppy: it places *all* coins from the whole wide world,
 onto one single blockchain.
 This is overkill.
 All that was really needed was a single global representation for a *single*
 coin (to see if that particular coin was spent).
 If one cares only about a single coin, there's no real point in looking
 at all other coins in the world - they are of no paricular interest.
 And yet, bitcoin, etc.
 *forces* all coins to live in one single centralized repo.
\end_layout

\begin_layout Itemize
Scaling: 7 billion people, 256/512 bytes of ID per person: 3.5 terabytes
 of info to keep in sync globally.
 That's ID's only.
 This does not count/record any pair-wise or N-wise interactions between
 peers.
\end_layout

\begin_layout Itemize
namecoin expires (destroys) data after N blocks, charges fee to keep data
 alive.
 
\end_layout

\end_deeper
\begin_layout Itemize
Distributed hash tables - Why.
 Examples IPFS, Tahoe-LaFS, and predecessors (Freenet).
 Also bittorent tracker.
 Pros:
\end_layout

\begin_deeper
\begin_layout Itemize
decentralization; load-balancing
\end_layout

\begin_layout Itemize
fault tolerance; data integrity
\end_layout

\begin_layout Itemize
scalability; load-balancing
\end_layout

\end_deeper
\begin_layout Itemize
Critique of DHT
\end_layout

\begin_deeper
\begin_layout Itemize
The problem of spam in IPFS, etc.
 and potential DDOS.
 FreeNet forgets unaccessed data.
\end_layout

\begin_layout Itemize
Sybil attacks: one entity (person) creates many puppet identities (sockpuppets).
 Identity validation.
 Defense against sybil remains open research question.
\end_layout

\begin_layout Itemize
How does sybil attack against DHT actually work? Tech details?
\end_layout

\begin_layout Itemize
Again - this is a symptom of representating a singleton: i.e.
 a single global copy, instead of a locally-balancing, locally-verifiable
 distributed system.
\end_layout

\end_deeper
\begin_layout Itemize
Anti-singleton designs.
 The point is: chat is inherently P2P.
 Social media is inherently P2P.
 Financial transactions are inheretly P2P.
 Legal contracts are inherently P2P.
 So why are we using centralized designs to solve them? Short answer: its
 hard to avoid entralization...
\end_layout

\begin_layout Itemize
Distributed P2P social media: https://www.scuttlebutt.nz/stories/design-challenge-
avoid-centralization-and-singletons
\end_layout

\begin_layout Itemize
Whisper protocols??? (SWRLDS)
\end_layout

\begin_layout Itemize
Double Ratchet algorithm
\end_layout

\begin_layout Itemize
scuttlebutt verification handshake #ssb is networking protocol
\end_layout

\begin_deeper
\begin_layout Itemize
How does ssb compar to I2P (invisible internet protocol)? https://geti2p.net/en/
\end_layout

\begin_layout Itemize
How does ssb compare to Noise protocol? https://noiseprotocol.org/
\end_layout

\end_deeper
\begin_layout Itemize
GnuNet as networking protocol
\end_layout

\begin_layout Itemize
secureshare built on GnuNet has little itty-bitty blockchains everywhere
\end_layout

\begin_layout Itemize
Noise protocol - mutual authentication, identity hiding, forward secrecy,
 zero round-trip encryption
\end_layout

\begin_deeper
\begin_layout Itemize
Users include WhatsApp WireGuard, Lightning, and I2P.
\end_layout

\end_deeper
\begin_layout Itemize
homomorphic encryption
\end_layout

\begin_layout Itemize
Blockhain apps: uncorruptable, uneraseable database.
 When is this desirable? For what reason? Why isn't git enough? (scope of
 git; generic databse issues.
 More to life than SQL)
\end_layout

\begin_layout Itemize
Decentralized vs.
 Federated.
 what moxie said about dominating carries when federated.
 
\end_layout

\begin_layout Itemize
Apps cornerstone: unique identity; authentication; needed for voting, UBI,
 but also for plain-old social interaction.
\end_layout

\begin_layout Itemize
Distributed ledgers
\end_layout

\begin_deeper
\begin_layout Itemize
ERP (enterprise resource planning) as decentralized distributed accounting
 ledger build on 1990's technology that fails to scale down to small business
 or consumer level.
 (too complex)
\end_layout

\begin_layout Itemize
IOTA https://www.iota.org/ still has a strong corporate focus
\end_layout

\begin_layout Itemize
No micro-transactions (pennies per trade)
\end_layout

\begin_layout Itemize
no personal accounting (McDonalds emails me my credit-card receipt, instead
 of placing it in my personal general ledger.
 Ditto for Amazon, my bank, my insurance company, my doctor, etc.
 No privacy, because gmail can read my receipts.
 No automation: I have to hand-transcribe into gnucash)
\end_layout

\end_deeper
\begin_layout Itemize
UBI apps (value-flow apps, community-value-exchange apps, mutual credit)
\end_layout

\begin_deeper
\begin_layout Itemize
https://github.com/valueflows/vf-apps
\end_layout

\begin_layout Itemize
fractalide
\end_layout

\begin_layout Itemize
Input-Output Hong Kong .org https://iohk.io/research/papers/#an-ontology-for-smart
-contracts
\end_layout

\begin_layout Itemize
https://rchain.coop/platform 
\end_layout

\begin_layout Itemize
https://statebox.org/ 
\end_layout

\begin_layout Itemize
https://www.stellar.org/how-it-works/stellar-basics/#how-it-works
\end_layout

\begin_layout Itemize
Critique: UBI is income w/o voting rights.
 Compare to stock ownership, where you get dividend income AND voting rights!
\end_layout

\end_deeper
\begin_layout Itemize
Liquid democracy (the need for a voting infrastructure beyond representative
 democracy, and beyond direct referendum)
\end_layout

\begin_layout Itemize
Apps: shard storage of mapping/geographic info; a global geographic database.
 With control over who sees what information (utilities, property developers
 want to hide geographic info).
 Needed for construction, property ownership, utility easements.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Personal control of information
\begin_inset Quotes erd
\end_inset

 (?? what does this mean???)
\end_layout

\begin_deeper
\begin_layout Itemize
Openbook as opensouce face-book with control over information.
 (huh?)
\end_layout

\begin_layout Itemize
solid.mit.edu (sucks, so far...)
\end_layout

\end_deeper
\begin_layout Itemize
Still got political issues: EULA, DRM, anti-hacking, patents
\end_layout

\begin_layout Itemize
Anonimity: TOR, I2P (Invisible Internet Project)
\end_layout

\begin_layout Itemize
Matrix, Wire, Onion.chat, GNU Ring (Signal vs.
 Telegram and WhatsApp)
\end_layout

\begin_layout Itemize
Holochain for transactional guarantees
\end_layout

\begin_layout Itemize
Radicle for replicated state machines
\end_layout

\end_body
\end_document
