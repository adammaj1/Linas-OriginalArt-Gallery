#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{url} 
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Iteration on the Real Number Line
\end_layout

\begin_layout Author
Linas Vepstas
\end_layout

\begin_layout Date
December 2017
\end_layout

\begin_layout Abstract
This note describes a sequence of explorations to develop ideas and tools
 for analyzing and understanding some very simple iterated function sequences.
 The primary focus is on leveraging the space 
\begin_inset Formula $\left\{ 0,1\right\} ^{\omega}$
\end_inset

of infinite strings of binary digits, and the fact that they can be used
 to represent the real number line.
 It is well-known that this space, the Cantor space, appears in a broad
 variety of guises and incarnations the study of iterated function sequences.
 Yet somehow the reasons for its impact, and the precise mechanics remains
 murky and unclear.
 This note is an effort to clarify how it fits in, and more generally, to
 elucidate the tension between multiplication of real numbers, and how multiplic
ation acts on real numbers represented in the Cantor space.
\end_layout

\begin_layout Abstract
The work presented here is mostly the result of sheer persistence, rather
 than that of deep insight.
 Progress is difficult, and the results are modest.
 
\end_layout

\begin_layout Abstract
One interesting insight emerges: the complicated structure of the iterated
 logistic map, tent map, 
\emph on
etc.

\emph default
 is entirely due to the chaotic dynamics of the carry bit in multiplication.
 If the carry bit is suppressed, then one obtains only reshufflings, which
 have a completely uniform distribution lacking in structure.
\end_layout

\begin_layout Abstract
Anothe interesting, surprising result is that the eigenvalue of the transfer
 operator of the iterated function 
\begin_inset Formula $2Kx\mod1$
\end_inset

 - a kind of downscaled Bernoulli shift, similar to the tent map and the
 famous logistic map, seems to have eigenvalues lying on a circle of radius
 
\begin_inset Formula $1/2K$
\end_inset

 in the complex plane.
 This is found numerically, using a natural Haar-wavelet-like basis that
 presents itself naturally for the problem.
 Given that the transfer operator is purely real, the appearance of such
 a quasi-unitary spectrum seems surprising.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is an exploration of iterated maps on the unit interval of the real
 number line.
 That is, maps 
\begin_inset Formula 
\[
f:[0,1]\to[0,1]
\]

\end_inset

together with the consequence of iterating them by composing: 
\begin_inset Formula 
\[
f^{n}(x)=(f\circ f\circ\cdots\circ f)(x)=f(f(\cdots f(x)\cdots))
\]

\end_inset

Such iterated maps are often ergodic and sometimes chaotic.
 This text is concerned with certain very simple iterated maps, attempting
 to find the simplest possible settings, so as to clarify the dynamics,
 to expose the core principles, and to provide usable tools that can be
 deployed in more complex settings.
\end_layout

\begin_layout Standard
The prototype for this effort is the Bernoulli map, which is exactly solvable,
 and can be characterized in a rich variety of ways.
 This has been explored in depth in my other writings, and will not be repeated
 here.
 Two similar maps are the tent map and the logistic map; the later is particular
ly famous and well studied.
 Neither of these maps are 
\begin_inset Quotes eld
\end_inset

exactly solvable
\begin_inset Quotes erd
\end_inset

 by current technology, even though they can be computed to arbitrary accuracy.
 The goal of this text is to push on the limits of what is possible, of
 what can be extracted from these systems.
 The approach is to explore, in greater detail, simpler systems that seem
 to be closely related, and yet might be more tractable.
\end_layout

\begin_layout Standard
This text begins with some pretty pictures, showing the iterated tent and
 logistic maps, so as to whet the readers appetite for the considerably
 more dry material that follows.
 The goal, as always to to simplify and abstract.
 This is a difficult task.
 The results are modest.
\end_layout

\begin_layout Subsection
Bernoulli shift
\end_layout

\begin_layout Standard
The Bernoulli shift (aka the bit-shift map) is an iterated map on the unit
 interval, given by iteration of the function
\begin_inset Formula 
\begin{equation}
b(x)=\begin{cases}
2x & \mbox{ for }0\le x<\frac{1}{2}\\
2x-1 & \mbox{ for }\frac{1}{2}\le x\le1
\end{cases}\label{eq:Bernoulli shift}
\end{equation}

\end_inset

The symbolic dynamics of this map gives the binary digit expansion of 
\begin_inset Formula $x$
\end_inset

.
 That is, write 
\begin_inset Formula 
\[
b^{n}(x)=(b\circ b\circ\cdots\circ b)(x)=b(b(\cdots b(x)\cdots))
\]

\end_inset

to denote the 
\begin_inset Formula $n$
\end_inset

-fold iteration of 
\begin_inset Formula $b$
\end_inset

 and let 
\begin_inset Formula $b^{0}(x)=x$
\end_inset

.
 The symbolic dynamics is given by the bit-sequence
\begin_inset Formula 
\begin{equation}
b_{n}\left(x\right)=\begin{cases}
0 & \mbox{ if }0\le b^{n}(x)<\frac{1}{2}\\
1 & \mbox{ if }\frac{1}{2}\le b^{n}(x)\le1
\end{cases}\label{eq:bernoulli-bits}
\end{equation}

\end_inset

Of course, the symbolic dynamics recreates the initial real number:
\begin_inset Formula 
\[
x=\sum_{n=0}^{\infty}b_{n}\left(x\right)2^{-n-1}
\]

\end_inset

All of this is just a fancy way of saying that a real number can be written
 in terms of it's base-2 binary expansion.
 That is, the binary digits for 
\begin_inset Formula $x$
\end_inset

 are the 
\begin_inset Formula $b_{n}=b_{n}\left(x\right)$
\end_inset

, so that
\begin_inset Formula 
\[
x=0.b_{0}b_{1}b_{2}\cdots
\]

\end_inset


\end_layout

\begin_layout Standard
The Bernoulli shift has many interesting properties, connecting it to the
 Cantor set and to many self-similar fractals.
 I have explored these in many other texts, as have other authors, and will
 not repeat these here.
 The current task is to attempt to see how many of these properties still
 hold in slightly more complex systems, and whether any of the tools used
 to analyze and solve the Bernoulli shift can be applied to these systems.
\end_layout

\begin_layout Subsection
Downshift
\end_layout

\begin_layout Standard
Consider a similar shift process; I don't know if it has a commonly used
 name, so I will call it a 
\begin_inset Quotes eld
\end_inset

downshift
\begin_inset Quotes erd
\end_inset

.
 Give a constant 
\begin_inset Formula $K$
\end_inset

 fixed so that 
\begin_inset Formula $0\le K\le1$
\end_inset

, the downshift is given by iterating on
\begin_inset Formula 
\begin{equation}
b_{K}(x)=\begin{cases}
2Kx & \mbox{ for }0\le x<\frac{1}{2}\\
2K\left(x-\frac{1}{2}\right) & \mbox{ for }\frac{1}{2}\le x\le1
\end{cases}\label{eq:downshift}
\end{equation}

\end_inset

It also generates a symbolic dynamics, defined in the same way as above:
 write
\begin_inset Formula 
\begin{equation}
k_{n}=\begin{cases}
0 & \mbox{ if }0\le b_{K}^{n}(x)<\frac{1}{2}\\
1 & \mbox{ if }\frac{1}{2}\le b_{K}^{n}(x)\le1
\end{cases}\label{eq:down-bits}
\end{equation}

\end_inset

Given the symbolic dynamics, one can reconstruct the original value whenever
 
\begin_inset Formula $1/2<K$
\end_inset

 as
\begin_inset Formula 
\[
x=\frac{k_{0}}{2}+\frac{1}{2K}\left(\frac{k_{1}}{2}+\frac{1}{2K}\left(\frac{k_{2}}{2}+\frac{1}{2K}\left(\frac{k_{3}}{2}+\frac{1}{2K}\left(\cdots\right)\right)\right)\right)
\]

\end_inset

That is, one clearly sees that 
\begin_inset Formula $b_{K}(x)$
\end_inset

 acts as a shift on this sequence:
\begin_inset Formula 
\[
b_{K}(x)=\frac{k_{1}}{2}+\frac{1}{2K}\left(\frac{k_{2}}{2}+\frac{1}{2K}\left(\frac{k_{3}}{2}+\frac{1}{2K}\left(\frac{k_{4}}{2}+\frac{1}{2K}\left(\cdots\right)\right)\right)\right)
\]

\end_inset

In this sense, this shift is 
\begin_inset Quotes eld
\end_inset

exactly solvable
\begin_inset Quotes erd
\end_inset

: the above provides a closed-form solution for iterating and un-iterating
 the sequence.
\end_layout

\begin_layout Standard
Multiplying out the above sequence, one obtains the series
\begin_inset Formula 
\begin{equation}
x=\frac{1}{2}\,\sum_{n=0}^{\infty}\frac{k_{n}}{\left(2K\right)^{n}}\label{eq:shift series}
\end{equation}

\end_inset

That is, the bit-sequence that was extracted by iteration can be used to
 reconstruct the original real number.
 Setting 
\begin_inset Formula $K=1$
\end_inset

 in eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:bernoulli-bits"

\end_inset

 gives the Bernoulli shift.
 The symbolic dynamics is explored in a later section.
\end_layout

\begin_layout Subsection
Density Visualizations
\end_layout

\begin_layout Standard
Why is this interesting to explore? This is best illustrated with some graphs.
 Shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Bifurcation-Diagram"

\end_inset

 is the 
\begin_inset Quotes eld
\end_inset

bifurcation diagram
\begin_inset Quotes erd
\end_inset

 for the downshift.
 It visualizes the long-term dynamics of the downshift.
 
\end_layout

\begin_layout Standard
This is done by generating a histogram, and then taking the limit, as follows.
 One divides the unit interval into a fixed sequence of equal-sized bins;
 say a total of 
\begin_inset Formula $N$
\end_inset

 bins, so that each is 
\begin_inset Formula $1/N$
\end_inset

 in width.
 Pick a starting 
\begin_inset Formula $x$
\end_inset

, and then iterate: if, at the 
\begin_inset Formula $n$
\end_inset

'th iteration, one has that 
\begin_inset Formula $j/N\le b_{K}^{n}(x)<(j+1)/N$
\end_inset

, then increment the count for the 
\begin_inset Formula $j$
\end_inset

'th bin.
 After a total of 
\begin_inset Formula $M$
\end_inset

 iterations, let 
\begin_inset Formula $c(j;M)$
\end_inset

 be the count in the 
\begin_inset Formula $j$
\end_inset

'th bin.
 This count is the histogram.
 In the limit of a large number of iterations, as well as small bin sizes,
 one obtains a distribution: 
\begin_inset Formula 
\[
\rho(y;x)=\lim_{N\to\infty}\lim_{M\to\infty}\frac{c(j;M)}{M}\mbox{ for }\frac{j}{N}\le y<\frac{j+1}{N}
\]

\end_inset

This distribution depends on the initial value 
\begin_inset Formula $x$
\end_inset

 chosen for the point to be iterated; a 
\begin_inset Quotes eld
\end_inset

nice
\begin_inset Quotes erd
\end_inset

 distribution results when one averages over all starting points:
\begin_inset Formula 
\[
\rho(y)=\int_{0}^{1}\rho(y;x)\,dx
\]

\end_inset

Numerically, this integration can be achieved by randomly sampling a large
 number of starting points.
 Observe that 
\begin_inset Formula $\rho(y)$
\end_inset

 is a probability distribution:
\begin_inset Formula 
\[
1=\int_{0}^{1}\rho(x)\,dx
\]

\end_inset

This probability distribution is an eigenstate of the transfer operator
 for the downshift; the definition of the transfer operator of the downshift
 is given later.
 Probability distributions are the same thing as measures; this particular
 distribution is invariant under iteration, and thus is often called the
 invariant measure, or sometimes the Haar measure.
\end_layout

\begin_layout Standard
For each fixed 
\begin_inset Formula $K$
\end_inset

, one obtains a distinct distribution 
\begin_inset Formula $\rho_{K}(y)$
\end_inset

.
 The figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Density-Distribution"

\end_inset

 illustrates some of these distributions.
 Note that, for 
\begin_inset Formula $k<1/2$
\end_inset

, the distribution is given by 
\begin_inset Formula $\rho_{K}(y)=\delta(y)$
\end_inset

, a Dirac delta function, located at 
\begin_inset Formula $y=0$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Downshift Density Distribution
\begin_inset CommandInset label
LatexCommand label
name "fig:Undershift-Density-Distribution"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename bigbern.eps
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
The above figure shows three different density distributions, for 
\begin_inset Formula $\rho_{0.6}(y)$
\end_inset

, 
\begin_inset Formula $\rho_{0.8}(y)$
\end_inset

 and 
\begin_inset Formula $\rho_{0.9}(y)$
\end_inset

, calculated numerically.
 This is obtained by histogramming a large number of point trajectories,
 as described in the text.
 The small quantities of jitter are due to a finite number of samples.
 To generate this figure, a total of 
\begin_inset Formula $M=4000$
\end_inset

 iterations were performed, using randomly generated arbitrary-precision
 floats (the Gnu GMP package), partitioned into 
\begin_inset Formula $N=800$
\end_inset

 bins, and sampled 24000 times (or 30 times per bin) to perform the averaging
 integral.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Generated with `fractal/misc/bitops/bigbern.C` edited to print only slices.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The general trend of the distributions, as a function of 
\begin_inset Formula $K$
\end_inset

, can be visualized with a Feigenbaum-style 
\begin_inset Quotes eld
\end_inset

bifurcation diagram
\begin_inset Quotes erd
\end_inset

, shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Bifurcation-Diagram"

\end_inset

.
 This color-codes each distribution 
\begin_inset Formula $\rho_{K}(y)$
\end_inset

 and arranges them in a stack; a horizontal slice through the diagram correspond
s to 
\begin_inset Formula $\rho_{K}(y)$
\end_inset

 for a fixed value of 
\begin_inset Formula $K$
\end_inset

.
 The term 
\begin_inset Quotes eld
\end_inset

bifurcation diagram
\begin_inset Quotes erd
\end_inset

 comes from its use to visualize the logistic map iterator.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Downshift Bifurcation Diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Undershift-Bifurcation-Diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename bern-4K.png
	lyxscale 80
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
This figure shows the density 
\begin_inset Formula $\rho_{K}(y)$
\end_inset

, rendered in color.
 The constant 
\begin_inset Formula $K$
\end_inset

 is varied from 0 at the bottom to 1 at the top; whereas 
\begin_inset Formula $y$
\end_inset

 runs from 0 on the left to 1 on the right.
 Thus, a fixed value of 
\begin_inset Formula $K$
\end_inset

 corresponds to a horizontal slice through the diagram.
 The color green represents values of 
\begin_inset Formula $\rho_{K}(y)\approx0.5$
\end_inset

, while red represents 
\begin_inset Formula $\rho_{K}(y)\gtrsim1$
\end_inset

 and blue-to-black represents 
\begin_inset Formula $\rho_{K}(y)\apprle0.25$
\end_inset

.
 The diagram is 
\begin_inset Quotes eld
\end_inset

interesting
\begin_inset Quotes erd
\end_inset

 only for 
\begin_inset Formula $1/2<K$
\end_inset

; for smaller 
\begin_inset Formula $K$
\end_inset

's, one has that 
\begin_inset Formula $\rho_{K}(y)=\delta(y)$
\end_inset

, indicated by the column of red pixels on the left side of the image.
 The lines forming the fan shape are not straight, they only seem to be;
 in fact, they have a slight curve.
 This means that one cannot apply guess-work to discover the overall diagram
 shown here.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
created with fractal/misc/bitops/bigbern.C 800 800 1360 0.5 0.5 1 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tent Map
\end_layout

\begin_layout Standard
The tent map is a closely related iterated map, given by iteration of the
 function
\begin_inset Formula 
\[
t_{K}(x)=\begin{cases}
2Kx & \mbox{ for }0\le x<\frac{1}{2}\\
2K\left(1-x\right) & \mbox{ for }\frac{1}{2}\le x\le1
\end{cases}
\]

\end_inset

Its similar to the downshift, except that the second arm is reflected backwards,
 forming a tent.
 The bifurcation diagram is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tent-Map-Bifur"

\end_inset

.
 Its is worth contemplating the similarities between this, and the corresponding
 downshift diagram.
 Clearly, there are a number of shared features.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tent Map Bifurcation Diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Tent-Map-Bifur"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename tent-4K.png
	lyxscale 60
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
The bifurcation diagram for the tent map.
 The value of 
\begin_inset Formula $K$
\end_inset

 runs from 0.5 at the bottom of the image, to 1.0 at the top.
 The color scheme is adjusted so that green represents the average value
 of the distribution, red represents areas of more than double the average
 value, while blue shows those values that are about half the average value.
 Note that this is a different color scheme than that used in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Bifurcation-Diagram"

\end_inset

; that scheme would obliterate the lower half of this figure in red.
\begin_inset Newline newline
\end_inset


\begin_inset space \qquad{}
\end_inset

The black areas represent parts of the iterated range that are visited at
 most a finite number of times.
 To the left, a straight line indicates that after one iteration, points
 in the domain 
\begin_inset Formula $K\le x\le1$
\end_inset

 are never visited.
 To the right, points in the domain 
\begin_inset Formula $0\le x\le2K\left(1-K\right)$
\end_inset

 are never visited more than a finite number of times.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Logistic Map
\end_layout

\begin_layout Standard
The logistic map is related to the tent map, and is given by iteration of
 the function
\begin_inset Formula 
\[
f_{K}\left(x\right)=4Kx(1-x)
\]

\end_inset

It essentially replaces the triangle forming the tent map with a parabola
 of the same height.
 That is, the function is defined here so that the the same value of 
\begin_inset Formula $K$
\end_inset

 corresponds to the same height for all three maps.
 Although the heights of the iterators have been aligned so that they match,
 each exhibits rather dramatically different dynamics.
 The downshift map has a single fixed point for 
\begin_inset Formula $K<1/2$
\end_inset

, and then explodes into a fully chaotic regime above that.
 By contrast, the logistic map maintains a single fixed point up to 
\begin_inset Formula $K=3/4$
\end_inset

, where it famously starts a series of period-doubling bifurcations.
 The onset of chaos is where the bifurcations come to a limit, at 
\begin_inset Formula $K=3.56995/4=0.892487$
\end_inset

.
 Within this chaotic region are 
\begin_inset Quotes eld
\end_inset

islands of stability
\begin_inset Quotes erd
\end_inset

, which do not appear in either the downshift, or in the tent map.
 The tent map does show a period-doubling regime, but in this region, there
 are no fixed points: rather, the motion is chaotic, but confined to multiple
 arms.
 At any rate, the period doubling occurs at different values of 
\begin_inset Formula $K$
\end_inset

 than for the logistic map.
\end_layout

\begin_layout Standard
The bifurcation diagram is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Logistic-Map-Bifurcation"

\end_inset

.
 Again, it is worth closely examining the similarities between this, and
 the corresponding tent-map diagram, as well as the downshift diagram.
 Naively, it would seem that the general structure of the chaotic regions
 are shared by all three maps.
 Thus, in order to understand chaos in the logistic map, it is perhaps easier
 to study it in the downshift.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Logistic Map Bifurcation Diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Logistic-Map-Bifurcation"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename feig-4K.png
	lyxscale 60
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
The logistic map bifurcation diagram.
 The value of 
\begin_inset Formula $K$
\end_inset

 runs from 0.875 at the bottom of the image, to 1.0 at the top.
 The color scheme is adjusted so that green represents the average value
 of the distribution, red represents areas of more than double the average
 value, while blue shows those values that are about half the average value.
 Clearly, the orbits of the iterated points spend much of their time near
 the edges of the diagram.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Sideshift
\end_layout

\begin_layout Standard
After exactly one iteration of the downshift, all initial points 
\begin_inset Formula $K\le x\le1$
\end_inset

 are swept up into the domain 
\begin_inset Formula $0\le x<K$
\end_inset

, and never leave.
 Likewise, the range of the iterated downshift is 
\begin_inset Formula $0\le x<K$
\end_inset

.
 Thus, an alternative representation of the downshift, filling the entire
 unit square, can be obtained by dividing both 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 by 
\begin_inset Formula $K$
\end_inset

 to obtain the function
\begin_inset Formula 
\[
d_{K}(u)=\begin{cases}
2Ku & \mbox{ for }0\le u<\frac{1}{2K}\\
2Ku-1 & \mbox{ for }\frac{1}{2K}\le u\le1
\end{cases}
\]

\end_inset

The orbit of a point 
\begin_inset Formula $x$
\end_inset

 in the downshift is identical to the orbit of a point 
\begin_inset Formula $u=x/K$
\end_inset

 in the above.
 This function, henceforth called the 
\begin_inset Quotes eld
\end_inset

sideshift
\begin_inset Quotes erd
\end_inset

, thus iterates identically to the downshift.
 The values, however, differ by a factor of 
\begin_inset Formula $K$
\end_inset

; this alters the symbolic dynamics of the sideshift, as compared to the
 downshift.
\end_layout

\begin_layout Standard
A similar situation applies to the tent map.
 After one iteration, all initial points 
\begin_inset Formula $K\le x\le1$
\end_inset

 are swept up into the domain 
\begin_inset Formula $0\le x<K$
\end_inset

.
 After a finite number of iterations, all points 
\begin_inset Formula $0<x\le2K\left(1-K\right)$
\end_inset

 are swept up, so that the remaining iteration takes place on the domain
 
\begin_inset Formula $2K\left(1-K\right)<x<K$
\end_inset

.
 It is worth defining a 
\begin_inset Quotes eld
\end_inset

sidetent
\begin_inset Quotes erd
\end_inset

 function, which corresponds to the that part of the tent map in which iteration
 is confined.
 It is nothing more than a rescaling of the tent map, ignoring those parts
 outside of the above domain that 
\begin_inset Quotes eld
\end_inset

wander away
\begin_inset Quotes erd
\end_inset

.
 The sidetent is given by
\begin_inset Formula 
\[
s_{K}(u)=\begin{cases}
2K\left(u+2\left(1-K\right)\right) & \mbox{ for }0\le u<\frac{2K-1}{2K}\\
2K\left(1-u\right) & \mbox{ for }\frac{2K-1}{2K}\le u\le1
\end{cases}
\]

\end_inset

It is interesting to compare the two bifurcation diagrams, side-by-side.
\end_layout

\begin_layout Section
Symbolic Dynamics
\end_layout

\begin_layout Standard
The Bernoulli shift corresponds to the sequence of binary digits of a real
 number.
 Such sequences can be imagined to belong to the space of all possible sequences
 of binary digits, the Cartesian product of infinitely many copies of the
 set containing two elements:
\begin_inset Formula 
\[
\left\{ 0,1\right\} \times\left\{ 0,1\right\} \times\left\{ 0,1\right\} \times\cdots=\left\{ 0,1\right\} ^{\omega}=2^{\omega}
\]

\end_inset

This space has a natural topology, the product topology, which differs sharply
 from the natural topology on the real-number line.
 Essentially all of the strange phenomena of fractals and of iterated functions
 follows from the product topology on this sequence.
 
\end_layout

\begin_layout Standard
One notable effect that can be explained in terms of the product topology
 is the fractal self-similarity of many kinds of fractals: this arises from
 the self-similarity of the product space under the action of a shift: specifica
lly, the left-shift, which discards the left-most digit, and shifts the
 rest over by one.
 The shift operator itself is that operator that performs this shift; self-simil
ar fractals can be seen to be eigenstates of the shift operator.
 
\end_layout

\begin_layout Standard
Another notable effect is the close proximity of the Cantor set to the proceedin
gs.
 In a certain sense, the Cantor set can be understood to be the most basic
 manifestation of the product space.
 When attuned to its presence, it can be seen everywhere throughout the
 proceedings.
\end_layout

\begin_layout Standard
A third byproduct is the manifestation of the infinitely-deep binary tree.
 This arises when the set 
\begin_inset Formula $\left\{ 0,1\right\} $
\end_inset

 of the product space is re-interpreted as the set 
\begin_inset Formula $\left\{ L,R\right\} $
\end_inset

 of left-right moves.
 At each point in a binary sequence, one can make a choice of one of two
 things: to move left or right.
 This naturally suggests a binary decision tree.
 
\end_layout

\begin_layout Standard
A fourth byproduct is the presence of some implicit, ambient hyperbolic
 space.
 The infinite binary tree, when drawn on flat two-dimensional space, simply
 
\begin_inset Quotes eld
\end_inset

runs out of room
\begin_inset Quotes erd
\end_inset

, as each subsequent branching pushes closer together.
 The infinite binary tree can be embedded in the simplest hyperbolic space,
 the Poincaré disk or upper-half-plane, in such a way that the distance,
 the spacing between two neighboring nodes is always the same.
 Visually, this takes the form of some prototypical M.C.
 Escher drawing, of a repeated fractal form moving out to the edge of a
 disk.
 This makes the self-similar shape of the infinite binary tree manifest:
 as one moves from one location to another, one always sees 
\begin_inset Quotes eld
\end_inset

the same thing
\begin_inset Quotes erd
\end_inset

 in all directions: the space is homogeneous.
\end_layout

\begin_layout Standard
The rational numbers play a very special role in the infinite binary tree.
 Dyadic rationals, of the form 
\begin_inset Formula $p/2^{n}$
\end_inset

 for integers 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $n$
\end_inset

 correspond to bit sequences (eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:bernoulli-bits"

\end_inset

) that terminate in all-zeros after a finite number of moves.
 That is, after an initial 
\begin_inset Quotes eld
\end_inset

chaotic
\begin_inset Quotes erd
\end_inset

 sequence, they settle down to a fixed point of period one.
 General rational numbers 
\begin_inset Formula $p/q$
\end_inset

 behave similarly, in that after an initial 
\begin_inset Quotes eld
\end_inset

chaotic
\begin_inset Quotes erd
\end_inset

 sequence, they settle down to periodic orbits of some fixed period.
 The bit-sequence becomes cyclic.
 This cyclic behavior implies that most of classical number theory can be
 dragged into the proceedings.
 Any particular statement that classical number theory makes with regard
 to rational numbers, or even modular forms, can be promptly ported over
 to a statement about the bit-sequences and the orbits of the Bernoulli
 shift, usually taking on a strange and unrecognizable form.
 
\end_layout

\begin_layout Standard
All of these things go together, like hand in glove: whenever one is manifest
 and visible, the others are lurking right nearby, in the unseen directions.
 All of these things can be given a formal and precise definition, and their
 explicit inter-relationships articulated.
 I have done so in other writings and will not repeat here; they are not
 immediately useful to the current proceedings.
 None-the-less, the general interplay between these concepts is extremely
 important to understand, and burbles constantly under the surface of the
 current proceedings.
\end_layout

\begin_layout Subsection
Symbolic Dynamics
\end_layout

\begin_layout Standard
Given that iteration can generate strings of binary digits, and that these
 can be reassembled back into rel numbers, it is interesting to ask what
 those mappings look like.
 To firm up the notation, let
\begin_inset Formula $\left(b_{n}\right)=\left(b_{0},b_{1,},\cdots\right)$
\end_inset

 denote a sequence of bits (or symbols) and write
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
x_{K}\left(\left(b_{n}\right)\right)=\frac{1}{2}\,\sum_{n=0}^{\infty}\frac{b_{n}}{\left(2K\right)^{n}}
\]

\end_inset

as the real number generated from that sequence.
 Conversely, given a real number 
\begin_inset Formula $x$
\end_inset

, let 
\begin_inset Formula $\left(k_{n;K}\left(x\right)\right)$
\end_inset

 denote the sequence of bits obtained by iterating the downshift on 
\begin_inset Formula $x$
\end_inset

 with constant 
\begin_inset Formula $K$
\end_inset

; that is, the sequence generated by eqn.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:down-bits"

\end_inset

.
 The bit sequence for 
\begin_inset Formula $\left(k_{n;1}\left(x\right)\right)$
\end_inset

 is just the bit sequence 
\begin_inset Formula $\left(b_{n}\left(x\right)\right)$
\end_inset

 generated by eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:bernoulli-bits"

\end_inset

.
 The transformations between symbol sequences and real numbers make sense
 only when 
\begin_inset Formula $1/2<K\le1$
\end_inset

.
\end_layout

\begin_layout Standard
Two interesting functions can be considered.
 One is the compressor 
\begin_inset Formula 
\[
\mbox{cpr}_{K}(y)=x_{1}\left(\left(k_{n;K}\left(y\right)\right)\right)
\]

\end_inset

and the other is the expander
\begin_inset Formula 
\begin{equation}
\mbox{pdr}_{K}(y)=x_{K}\left(\left(k_{n;1}\left(y\right)\right)\right)\label{eq:expander function}
\end{equation}

\end_inset

The terms 
\begin_inset Quotes eld
\end_inset

compressor
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

expander
\begin_inset Quotes erd
\end_inset

 are being invented here to indicate negative and positive Lyapunov exponents
 associated with the two functions.
 For almost all 
\begin_inset Formula $y$
\end_inset

, the compressor function is pushing nearby points closer together; the
 total measure of the range of the compressor function is less than one.
 Likewise, for almost all 
\begin_inset Formula $y$
\end_inset

, the expander function is pushing nearby points apart.
 These two functions are illustrated in figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Compressor-Function"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Expander-Function"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Compressor Function
\begin_inset CommandInset label
LatexCommand label
name "fig:Compressor-Function"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cpr.eps
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
This illustrates the compressor function for various values of 
\begin_inset Formula $K$
\end_inset

.
 As should be clear, almost all input values are mapped to a set of discrete
 output values.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
generated with fractal/misc/bitops/remap.c and remap.gplot
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Expander Function
\begin_inset CommandInset label
LatexCommand label
name "fig:Expander-Function"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pdr.eps
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
This illustrates the expander function for various values of 
\begin_inset Formula $K$
\end_inset

.
 As should be clear, almost all neighboring input values are mapped to wildly
 different output values.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
generated with fractal/misc/bitops/remap.c and remap.gplot
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The two functions are adjoint; specifically, one has that 
\begin_inset Formula $\mbox{pdr}_{K}\left(\mbox{cpr}_{K}\left(y\right)\right)=y$
\end_inset

 but that 
\begin_inset Formula $\mbox{cpr}_{K}\left(\mbox{pdr}_{K}\left(y\right)\right)\ne y$
\end_inset

.
 The former relation is equivalent to eqn.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:shift series"

\end_inset

.
 Not all possible sequences of bit strings appear in the downshift sequence
 
\begin_inset Formula $\left(k_{n;K}\left(x\right)\right)$
\end_inset

; that is, this function is not a surjection onto 
\begin_inset Formula $\left\{ 0,1\right\} ^{\omega}$
\end_inset

.
 This manifests itself as the gaps in the range of the compressor function,
 clearly visible in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Compressor-Function"

\end_inset

.
 If a sequence of bits is viewed as a sequence of left-right moves walking
 down a binary tree, this implies that some branches of the tree are never
 taken, and can be pruned.
 Only branches on the right are ever pruned: That is, there can be arbitrarily
 long sequences of zeros in the expansion, but the longest possible sequence
 of 1's is always bounded.
 The longest run of 1's possible is the largest value of 
\begin_inset Formula $n$
\end_inset

 that satisfies 
\begin_inset Formula 
\[
1\ge\frac{\frac{1}{2}\left(1+2K+\left(2K\right)^{2}+\cdots\left(2K\right)^{n-1}\right)}{\left(2K\right)^{n-1}}
\]

\end_inset

Solving, the bound is
\begin_inset Formula 
\begin{equation}
n=1+\left\lfloor \frac{-\log2\left(1-K\right)}{\log2K}\right\rfloor \label{eq:longest-all-ones}
\end{equation}

\end_inset

That is, every 
\begin_inset Formula $n$
\end_inset

'th right branch is pruned from the binary tree.
 For example, a run of three 1's in a row is possible only for 
\begin_inset Formula $K\ge\left(1+\sqrt{5}\right)/4\approx0.809017$
\end_inset

.
 The range of 
\begin_inset Formula $\mbox{cpr}_{K}\left(y\right)$
\end_inset

 is most of, but not all of the Cantor set.
 The figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Range-compress"

\end_inset

 visualizes the range of the compressor as a function of 
\begin_inset Formula $K$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Range of the compressor
\begin_inset CommandInset label
LatexCommand label
name "fig:Range-compress"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename unmap.png
	width 100col%

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
This figure illustrates a color coded visualization of the range of the
 compressor function.
 As before 
\begin_inset Formula $K$
\end_inset

 varies from 0 at the bottom to 1 at the top, and 
\begin_inset Formula $y$
\end_inset

 varies from 0 on the left to 1 on the right.
 In general, the compressor function maps intervals of the real number line
 to single points; the color corresponds to the size (the measure) of the
 intervals that were mapped to that particular point.
 Blue corresponds to a compression of the measure by about 1, green to a
 compression of about 2-3, and yellow-read to a compression greater than
 that.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Self similarity
\end_layout

\begin_layout Standard
The two functions cpr and pdr are self-similar.
 The pdr function demonstrates classic period doubling self-similarity:
 namely, under 
\begin_inset Formula $g(x)=x/2$
\end_inset

, it behaves as
\begin_inset Formula 
\[
\left(\mbox{pdr}_{K}\circ g\right)\left(x\right)=\mbox{pdr}_{K}\left(\frac{x}{2}\right)=\frac{1}{2K}\mbox{pdr}_{K}\left(x\right)
\]

\end_inset

while under reflection 
\begin_inset Formula $r(x)=1-x$
\end_inset

, it behaves as 
\begin_inset Formula 
\[
\left(\mbox{pdr}_{K}\circ r\right)\left(x\right)=\mbox{pdr}_{K}\left(1-x\right)=\left(\frac{K}{2K-1}-\mbox{pdr}_{K}\left(x\right)\right)
\]

\end_inset

Note that 
\begin_inset Formula 
\[
\lim_{x\to1}\,\mbox{pdr}_{K}\left(x\right)=\frac{K}{2K-1}
\]

\end_inset

The full dyadic monoid is generated by the generators 
\begin_inset Formula $g$
\end_inset

 and 
\begin_inset Formula $r$
\end_inset

; see other posts from me for lengthly expositions on the structure of the
 dyadic monoid and its relationship to the Cantor set and a large variety
 of fractals.
\end_layout

\begin_layout Standard
The function cpr also exhibits self-similarity, although it alters (expands)
 what happens on the 
\begin_inset Formula $x$
\end_inset

 axis.
 Several self-similarities are apparent.
 First, for 
\begin_inset Formula $0\le x\le1$
\end_inset

, one has
\begin_inset Formula 
\[
\mbox{cpr}_{K}\left(\frac{x}{2}\right)=\frac{1}{2}\mbox{cpr}_{K}\left(Kx\right)
\]

\end_inset

Equivalently, for 
\begin_inset Formula $0\le y\le K$
\end_inset

 one can trivially restate the above as
\begin_inset Formula 
\begin{equation}
\mbox{cpr}_{K}\left(\frac{y}{2K}\right)=\frac{1}{2}\mbox{cpr}_{K}\left(y\right)\label{eq:compressor self-sim}
\end{equation}

\end_inset

Although it follows trivially, this restatement helps avoid later confusion.
\end_layout

\begin_layout Standard
The left and right halves are identical to one-another, but offset: 
\begin_inset Formula 
\[
\mbox{cpr}_{K}\left(\frac{1}{2}+\frac{x}{2}\right)=\frac{1}{2}+\mbox{cpr}_{K}\left(\frac{x}{2}\right)
\]

\end_inset

It follows that
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mbox{cpr}_{K}\left(\frac{1}{2}+\frac{y}{2K}\right)=\frac{1}{2}+\frac{1}{2}\mbox{cpr}_{K}\left(y\right)
\]

\end_inset

Combining the above results into one, one has that
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mbox{cpr}_{K}\left(\frac{y}{2K}\right)+\mbox{cpr}_{K}\left(\frac{1}{2}+\frac{y}{2K}\right)=\frac{1}{2}+\mbox{cpr}_{K}\left(y\right)
\]

\end_inset

This last form is interesting, as it makes an appearance in relation to
 the transfer operator, defined below.
\end_layout

\begin_layout Subsection
Other things with similar symmetry
\end_layout

\begin_layout Standard
The cpr curve is just one that belongs to a class of such curves.
 As an example, one may construct a Takagi (blancmange) curve by iterating
 triangles whose peak is located at 
\begin_inset Formula $1/2K$
\end_inset

.
 The Takagi curve is an example of a curve transforming under a 3-dimensional
 representation of the dyadic monoid; the cpr curves transforms under a
 two-dimensional representation.
 See my paper on the Takagi curve for details.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Skew-Takagi-Curve"

\end_inset

 shows such a curve.
 Denote by 
\begin_inset Formula $\mbox{tak}_{K;w}\left(x\right)$
\end_inset

a curve constructed in this fashion.
 The transformation properties of this curve include self-similarity on
 the left, as
\begin_inset Formula 
\[
\mbox{tak}_{K;w}\left(\frac{x}{2K}\right)=x+w\;\mbox{tak}_{K;w}\left(x\right)
\]

\end_inset

for 
\begin_inset Formula $0\le x\le1$
\end_inset

 and self-similarity on the right, as
\begin_inset Formula 
\[
\mbox{tak}_{K;w}\left(\frac{1}{2K}+x\left(1-\frac{1}{2K}\right)\right)=1-x+w\;\mbox{tak}_{K;w}\left(x\right)
\]

\end_inset

Both of these properties follow directly from the construction of the curve;
 they can be taken as the defining equations for the curve.
 That is, the curve can be taken as that function which satisfies these
 two recursion relations.
\end_layout

\begin_layout Standard
The derivative of the skew Takagi curve is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Skew-Haar-Wavelet"

\end_inset

, and, for lack of a better name, could be called the skew Haar fractal
 wavelet.
 It can be defined as the formal derivative
\begin_inset Formula 
\[
\mbox{har}_{K;w}\left(x\right)=\frac{d}{dx}\,\mbox{tak}_{K;w}\left(x\right)
\]

\end_inset

This formal derivative is well-defined, as the skew Takagi is smooth and
 piecewise-linear almost everywhere; the places where it has corners is
 a dense set of measure zero.
 That is, the derivative is defined everywhere, except on a set of measure
 zero, which happens to be dense in the unit interval.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Skew Takagi Curve
\begin_inset CommandInset label
LatexCommand label
name "fig:Skew-Takagi-Curve"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename skew.eps
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
This figure shows a skew Takagi curve, and the first four steps of its construct
ion.
 The initial triangle is of height 1; the apex is located at 
\begin_inset Formula $1/2K$
\end_inset

, for K=0.8 in this figure.
 Subsequent triangles obtain a height of w=0.7 above the apex point, and
 are similarly skew.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
generated with `fractal/misc/bitops/skew.c` and `skew.gplot`
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the Haar fractal wavelet is piece-wise constant everywhere.
 It is constructed from a 
\begin_inset Quotes eld
\end_inset

mother wavelet
\begin_inset Quotes erd
\end_inset

 given by
\begin_inset Formula 
\begin{equation}
h_{K}(x)=\begin{cases}
2K & \mbox{for }0\le x<\frac{1}{2K}\\
\frac{-2K}{2K-1} & \mbox{for }\frac{1}{2K}\le x\le1
\end{cases}\label{eq:Haar mother}
\end{equation}

\end_inset

which is then iterated on to form the fractal curve 
\begin_inset Formula $\mbox{har}_{K;w}\left(x\right)$
\end_inset

.
 The self symmetries are
\begin_inset Formula 
\[
\mbox{har}_{K;w}\left(\frac{x}{2K}\right)=2K+w\;\mbox{har}_{K;w}\left(x\right)
\]

\end_inset

 and
\begin_inset Formula 
\[
\mbox{har}_{K;w}\left(\frac{1}{2K}+x\left(1-\frac{1}{2K}\right)\right)=-\frac{2K}{2K-1}+w\;\mbox{har}_{K;w}\left(x\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Skew Haar Wavelet
\begin_inset CommandInset label
LatexCommand label
name "fig:Skew-Haar-Wavelet"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename haar.eps
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
This figure shows the derivative of the skew Takagi curve.
 Note that it is piece-wise constant everywhere.
 The mother wavelet is shown, as well as the fourth iteration.
 The specific values graphed are 
\begin_inset Formula $K=0.8$
\end_inset

 and 
\begin_inset Formula $w=0.7$
\end_inset

.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
generated with `fractal/misc/bitops/skew.c` and `skew.gplot`
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Periodic Orbits
\end_layout

\begin_layout Standard
The Bernoulli shift, given by eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:bernoulli-bits"

\end_inset

, generates every possible bit-sequence.
 As was observed in a previous section, not every possible bit-sequence
 occurs in the downshift.
 The longest sequence of all-ones possible was given by eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:longest-all-ones"

\end_inset

.
 Arbitrary finite lengths of zeros do appear; but are there fixed points,
 i.e.
 sequences that terminate in all-zeros? Clearly, 
\begin_inset Formula $x=1/2\left(2K\right)^{n}$
\end_inset

 is such a fixed point: after 
\begin_inset Formula $n+1$
\end_inset

 iterations of eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:downshift"

\end_inset

, 
\begin_inset Formula $x$
\end_inset

 goes to zero, and stays there.
 Is this the only such fixed point? The answer depends on 
\begin_inset Formula $K$
\end_inset

.
 If 
\begin_inset Formula $K$
\end_inset

 can be written in the form of 
\begin_inset Formula $\left(2K\right)^{n}=2m+1$
\end_inset

 for some integers 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $m$
\end_inset

, then the values of 
\begin_inset Formula $x$
\end_inset

 which can iterate down to zero in 
\begin_inset Formula $n+1$
\end_inset

 steps are dense in the interval 
\begin_inset Formula $\left[0,K\right]$
\end_inset

.
 (TODO: this needs a simple, non-tedious proof).
 Otherwise, the fixed points are isolated.
 Curiously, such values 
\begin_inset Formula $K$
\end_inset

 are dense in the interval 
\begin_inset Formula $\left[1/2,1\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Similar statements can be made about the values for which the orbits are
 periodic.
\end_layout

\begin_layout Section
Transfer operators
\end_layout

\begin_layout Standard
The discovery and study of invariant measures, as well as of decaying states
 can be approached via the transfer operator.
 This is an operator that captures the behavior of a distribution under
 the action of a map.
 The invariant measure is an eigenstate of this operator; indeed, it provides
 a formal definition for what it means to be invariant under the action
 of the map.
\end_layout

\begin_layout Standard
Given an iterated map 
\begin_inset Formula $g:[0,1]\to[0,1]$
\end_inset

 on the unit interval, the transfer operator defines how distributions are
 acted on by this map.
 It is defined as
\begin_inset Formula 
\[
\left[\mathcal{L}_{g}f\right]\left(y\right)=\sum_{x=g^{-1}(y)}\frac{f(x)}{\left|g^{\prime}(x)\right|}
\]

\end_inset

The left adjoint of the transfer operator is the composition operator (Koopman
 operator).
 This is defined as 
\begin_inset Formula 
\[
\left[\mathcal{C}_{g}f\right]\left(y\right)=f\left(g\left(y\right)\right)
\]

\end_inset

The Koopman operator is adjoint, in the sense that 
\begin_inset Formula $\mathcal{L}_{g}\mathcal{C}_{g}=1$
\end_inset

 but that, in general, 
\begin_inset Formula $\mathcal{C}_{g}\mathcal{L}_{g}\ne1$
\end_inset

.
 
\end_layout

\begin_layout Subsection
The Downshift Transfer Operator
\end_layout

\begin_layout Standard
The transfer operator for the downshift map 
\begin_inset Formula $b_{K}(x)$
\end_inset

 is
\begin_inset Formula 
\[
\left[\mathcal{L}_{K}f\right]\left(y\right)=\begin{cases}
\frac{1}{2K}\left[f\left(\frac{y}{2K}\right)+f\left(\frac{y+K}{2K}\right)\right] & \mbox{ for }0\le y\le K\\
0 & \mbox{ for }K<y\le1
\end{cases}
\]

\end_inset

or, written more compactly
\begin_inset Formula 
\begin{equation}
\left[\mathcal{L}_{K}f\right]\left(y\right)=\frac{1}{2K}\left[f\left(\frac{y}{2K}\right)+f\left(\frac{y+K}{2K}\right)\right]\Theta\left(K-y\right)\label{eq:xfer oper}
\end{equation}

\end_inset

where 
\begin_inset Formula $\Theta$
\end_inset

 is the Heaviside step function.
 The density distributions graphed in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Density-Distribution"

\end_inset

 are those functions satisfying 
\begin_inset Formula 
\[
\left[\mathcal{L}_{K}\rho\right]\left(y\right)=\rho\left(y\right)
\]

\end_inset

That is, the 
\begin_inset Formula $\rho(y)$
\end_inset

 satisfies 
\begin_inset Formula 
\begin{equation}
\rho\left(y\right)=\frac{1}{2K}\left[\rho\left(\frac{y}{2K}\right)+\rho\left(\frac{y+K}{2K}\right)\right]\Theta\left(K-y\right)\label{eq:eigen-eqn}
\end{equation}

\end_inset

This is generally referred to as the Frobenius-Perron eigenfunction, as
 it corresponds to the largest eigenvalue of the transfer operator, and
 specifically, the eigenvalue 1.
\end_layout

\begin_layout Standard
More generally, one is interested in characterizing the eigenspectrum
\begin_inset Formula 
\[
\left[\mathcal{L}_{K}\rho\right]\left(y\right)=\lambda\rho\left(y\right)
\]

\end_inset

for eigenvalues 
\begin_inset Formula $\left|\lambda\right|\le1$
\end_inset

 and eigenfunctions 
\begin_inset Formula $\rho(y)$
\end_inset

.
 Solving this equation requires choosing a space of functions in which to
 work.
 Natural choices include any of the Banach spaces, and in particular, the
 space of square-integrable functions.
 Particularly interesting is the space of almost-smooth functions, those
 having discontinuities at only a countable number of locations, but otherwise
 being infinitely differentiable.
 Although the discussion so far implicitly conditions one to restrict oneself
 to real-valued functions, and to consider only real-valued eigenvalues,
 this is perhaps too sharp a restriction.
 As will be seen below, the complex eigenvalues seem to play some important
 role.
 At any rate, it should be obvious that, whatever the choice of function
 space, one must have that 
\begin_inset Formula $\rho\left(y\right)=0$
\end_inset

 whenever 
\begin_inset Formula $K<y$
\end_inset

.
 This turns out to be a rather harsh condition.
\end_layout

\begin_layout Standard
A very minor simplification can be achieved with a change of variable.
 Let 
\begin_inset Formula $y=K-\epsilon$
\end_inset

.
 Then the eigenequation becomes
\begin_inset Formula 
\[
2\lambda K\rho\left(K-\epsilon\right)=\rho\left(\frac{1}{2}-\frac{\epsilon}{2K}\right)+\rho\left(1-\frac{\epsilon}{2K}\right)
\]

\end_inset

The second term vanishes whenever 
\begin_inset Formula $K<1-\epsilon/2K$
\end_inset

 or 
\begin_inset Formula $\epsilon<2K(1-K)$
\end_inset

 and so one has the simpler recurrence relation
\begin_inset Formula 
\begin{equation}
\lambda\rho\left(y\right)=\frac{1}{2K}\rho\left(\frac{y}{2K}\right)\label{eq:eigen-branch}
\end{equation}

\end_inset

whenever 
\begin_inset Formula $K(2K-1)<y\le K$
\end_inset

.
\end_layout

\begin_layout Standard
The equations 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:eigen-eqn"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:eigen-branch"

\end_inset

 can be treated as recurrence relations, defining the 
\begin_inset Formula $\lambda=1$
\end_inset

 eigenstate.
 Recursing on these gives exactly the densities shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Density-Distribution"

\end_inset

.
 Computationally, these are much, much cheaper to compute, at least for
 
\begin_inset Formula $K$
\end_inset

 much larger than 1/2, although convergence issues present themselves as
 
\begin_inset Formula $K$
\end_inset

 approaches 1/2.
 The resulting density may be called the Frobenius-Perron eigenstate; because
 it can be quickly computed, it provides an alternative view of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Density-Distribution"

\end_inset

, free of stochastic sampling noise.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Computed in three places: rexfer.c reigen.c and complex.c
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Almost solutions
\end_layout

\begin_layout Standard
If one ignores the Heaviside step function in the definition, one easily
 finds a number of 
\begin_inset Quotes eld
\end_inset

almost solutions
\begin_inset Quotes erd
\end_inset

 to the transfer operator.
 These are most easily discussed by defining the operator
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left[\mathcal{P}_{K}f\right]\left(y\right)=\frac{1}{2K}\left[f\left(\frac{y}{2K}\right)+f\left(\frac{y+K}{2K}\right)\right]
\]

\end_inset

Solving this operator is relatively straight-forward.
 Consider, for example, the monomial 
\begin_inset Formula $f\left(y\right)=y^{n}$
\end_inset

.
 Clearly, 
\begin_inset Formula $\left[\mathcal{P}_{K}y^{n}\right]$
\end_inset

 is a polynomial of degree 
\begin_inset Formula $n$
\end_inset

 and that therefore, the space of polynomials is closed under the action
 of 
\begin_inset Formula $\mathcal{P}_{K}$
\end_inset

.
 But this result is even stronger: the monomials provide a basis in which
 
\begin_inset Formula $\mathcal{P}_{K}$
\end_inset

 is upper-triangular,
\emph on
 i.e.

\emph default
 solvable.
 It's eigensolutions in this basis are polynomials.
 The eigenspectrum is clearly discrete, and is given by 
\begin_inset Formula $\left(2K\right)^{-n-1}$
\end_inset

 for integers 
\begin_inset Formula $n$
\end_inset

 corresponding to the degree of the polynomial eigensolution.
 
\end_layout

\begin_layout Standard
This all goes horribly wrong if one instead considers 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

 and the almost-monomials 
\begin_inset Formula $f\left(y\right)=y^{n}\Theta\left(K-y\right)$
\end_inset

.
 This does not provide a basis that is closed under the action of 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

.
 Attempting to find the closure by iterating on 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

 generates a splatter of step functions.
 This case is examined more closely in the next section.
 
\end_layout

\begin_layout Standard
Attempting some guess-work, the self-similarity of the cpr function suggests
 an opening.
 Specifically, let 
\begin_inset Formula $\mbox{ei}_{K}\left(x\right)=\mbox{cpr}_{K}\left(x\right)-1/2$
\end_inset

.
 The one finds that
\begin_inset Formula 
\begin{align*}
\left[\mathcal{P}_{K}\mbox{ei}_{K}\right]\left(y\right)= & \frac{1}{2K}\left[\mbox{ei}_{K}\left(\frac{y}{2K}\right)+\mbox{ei}_{K}\left(\frac{y+K}{2K}\right)\right]\\
= & \frac{\mbox{ei}_{K}\left(y\right)}{2K}
\end{align*}

\end_inset

This is a non-polynomial, fractal eigenfunction of 
\begin_inset Formula $\mathcal{P}_{K}$
\end_inset

, and, with a bit of elbow-grease, one can find many more.
 This includes the Takagi functions, and their higher-order analogs, which
 are, roughly speaking, Takagi functions constructed from polynomials.
 These all have interesting self-similarity properties under the dyadic
 monoid.
\end_layout

\begin_layout Standard
Unfortunately, one has that 
\begin_inset Formula $\mbox{ei}_{K}\left(x\right)\ne0$
\end_inset

 when 
\begin_inset Formula $K<x$
\end_inset

; it won't do as an eigenfunction of 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

.
 There is no obvious, simple modification of 
\begin_inset Formula $\mbox{ei}_{K}\left(x\right)$
\end_inset

 that would cause it to be a valid eigensolution of 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

.
 Manually installing a factor of 
\begin_inset Formula $\Theta\left(K-y\right)$
\end_inset

 and then iterating to find the closure leads to the same splatter of step
 functions as in the case of the polynomials.
\end_layout

\begin_layout Standard
Another interesting case arises if one attempts a Fourier-inspired basis.
 Define 
\begin_inset Formula 
\[
\mbox{e}_{K;n;l}\left(x\right)=\exp i2\pi\left(2l+1\right)\left(2K\right)^{n}x
\]

\end_inset

for integer 
\begin_inset Formula $l$
\end_inset

.
 One then obtains a shift sequence
\begin_inset Formula 
\[
\left[\mathcal{P}_{K}\mbox{e}_{K;n;l}\right]\left(x\right)=\frac{1}{2K}\mbox{e}_{K;n-1;l}\left(x\right)\left(1+\mbox{e}_{K;n;l}\left(\frac{1}{2}\right)\right)
\]

\end_inset

This is not a viable candidate for 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

, as it is again beset by the step function.
 As a shift sequence, it can be used to construct coherent states that are
 eigenfunctions of 
\begin_inset Formula $\mathcal{P}_{K}$
\end_inset

, having any eigenvalue within the unit disk.
 Specifically, observe that 
\begin_inset Formula $\mbox{e}_{K;0;l}\left(1/2\right)=\exp i\pi\left(2l+1\right)=-1$
\end_inset

 so that 
\begin_inset Formula $\left[\mathcal{P}_{K}\mbox{e}_{K;0;l}\right]\left(x\right)=0$
\end_inset

 and so the shift sequence terminates after finite iteration.
 Given a complex value 
\begin_inset Formula $z$
\end_inset

, construct the coherent state as
\begin_inset Formula 
\[
\phi_{l;z}\left(x\right)=\sum_{n=0}^{\infty}z^{n}\mbox{e}_{K;n;l}\left(x\right)
\]

\end_inset

The shift is then
\begin_inset Formula 
\[
\left[\mathcal{P}_{K}\phi_{l;z}\right]\left(x\right)=\frac{z}{2K}\sum_{n=0}^{\infty}z^{n}\left(1+\mbox{e}_{K;n+1;l}\left(\frac{1}{2}\right)\right)\mbox{e}_{K;n;l}\left(x\right)
\]

\end_inset

This is not particularly useful, until one notices that for for certain
 values of 
\begin_inset Formula $K$
\end_inset

, this contains nilpotent subseries.
 
\end_layout

\begin_layout Standard
Specifically, fix a value of 
\begin_inset Formula $n=N$
\end_inset

 and consider those values of 
\begin_inset Formula $K$
\end_inset

 for which 
\begin_inset Formula $\mbox{e}_{K;N;l}\left(1/2\right)=-1$
\end_inset

.
 This holds whenever 
\begin_inset Formula $\left(2K\right)^{N}$
\end_inset

 is an odd integer, that is, whenever 
\begin_inset Formula $K=\frac{1}{2}\left(2m+1\right)^{1/N}$
\end_inset

 (and, as always, 
\begin_inset Formula $K\le1$
\end_inset

).
 For these special values of 
\begin_inset Formula $K$
\end_inset

, one has that 
\begin_inset Formula $\left[\mathcal{P}_{K}\mbox{e}_{K;N;l}\right]\left(x\right)=0$
\end_inset

 and so the functions 
\begin_inset Formula 
\[
\phi_{l;z;N}\left(x\right)=\sum_{n=0}^{N}z^{n}\mbox{e}_{K;n;l}\left(x\right)
\]

\end_inset

vanish after 
\begin_inset Formula $N$
\end_inset

 iterations of 
\begin_inset Formula $\mathcal{P}_{K}$
\end_inset

.
 That is, these can be used to form a a basis in which 
\begin_inset Formula $\mathcal{P}_{K}$
\end_inset

 is nilpotent.
 Conversely, letting 
\begin_inset Formula $m$
\end_inset

 and 
\begin_inset Formula $N$
\end_inset

 be free, the values for which 
\begin_inset Formula $K=\frac{1}{2}\left(2m+1\right)^{1/N}$
\end_inset

 are dense in the interval 
\begin_inset Formula $\left[1/2,1\right)$
\end_inset

 and so any 
\begin_inset Formula $K$
\end_inset

 is arbitrarily close to one with a nilpotent function space.
 These values of 
\begin_inset Formula $K$
\end_inset

 are exactly the same values for which the bit sequences given by eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:down-bits"

\end_inset

 eventually terminate in all zeros; i.e.
 become periodic fixed points with period 1.
 
\end_layout

\begin_layout Standard
The existence of a dense set of fixed points is dual to the the existence
 of nilpotent densities.
 That is, one 
\begin_inset Quotes eld
\end_inset

causes
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

forces
\begin_inset Quotes erd
\end_inset

 the other to happen.
 This idea should be further elaborated, as it establishes a duality between
 countable and uncountable sets, which has an element of curiosity to it.
\end_layout

\begin_layout Standard
Presumably, there are special values of 
\begin_inset Formula $K$
\end_inset

 which allow a periodic orbits to originate from a dense set.
 Such values of 
\begin_inset Formula $K$
\end_inset

, and such periodic orbits, should then correspond to specific self-similarities
 of the 
\begin_inset Formula $\phi_{l;z}\left(x\right)$
\end_inset

 function, specifically manifesting as cyclic behavior in 
\begin_inset Formula $\left(1+\mbox{e}_{K;n+1;l}\left(\frac{1}{2}\right)\right)^{p}$
\end_inset

 for some period 
\begin_inset Formula $p$
\end_inset

.
 Whether there is some similar manifestation for 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

 is wholly unclear.
\end_layout

\begin_layout Subsection
Iterated transfer operator
\end_layout

\begin_layout Standard
To understand the nature of the steady-state solution (the Frobenius-Perron
 eigenstate), its is worth iterating on the recurrence relation for it,
 by hand, the first few times.
 To do this, it is convenient to write it in the form
\begin_inset Formula 
\[
\left[\mathcal{L}_{K}f\right]\left(y\right)=\frac{\Theta\left(y\right)}{2K}\left[f\left(\alpha\left(y\right)\right)+f\left(\beta\left(y\right)\right)\right]
\]

\end_inset

where 
\begin_inset Formula $\Theta\left(y\right)=1$
\end_inset

 if 
\begin_inset Formula $y\le K$
\end_inset

 else zero; this is a step function to denote the vanishing for the operator
 for 
\begin_inset Formula $y>K$
\end_inset

.
 (This differs from the use of 
\begin_inset Formula $\Theta$
\end_inset

 as the Heaviside step function in earlier sections; the intent is the same,
 but the goal is to have a briefer notation here.
 Which is which should be clear from context.) The functions 
\begin_inset Formula $\alpha\left(y\right)=y/2K$
\end_inset

 and 
\begin_inset Formula $\beta\left(y\right)=\frac{1}{2}+\alpha\left(y\right)$
\end_inset

 are convenient shorthands for symbolic iteration.
\end_layout

\begin_layout Standard
Iterating once gives
\begin_inset Formula 
\begin{eqnarray*}
\left[\mathcal{L}^{2}f\right]\left(y\right)= & \frac{\Theta\left(y\right)}{\left(2K\right)^{2}} & \left[\Theta\left(\alpha\left(y\right)\right)\left[f\left(\alpha^{2}\left(y\right)\right)+f\left(\left(\beta\circ\alpha\right)\left(y\right)\right)\right]+\right.\\
 &  & \left.\Theta\left(\beta\left(y\right)\right)\left[f\left(\left(\alpha\circ\beta\right)\left(y\right)\right)+f\left(\beta^{2}\left(y\right)\right)\right]\right]
\end{eqnarray*}

\end_inset

Using a simplified notation 
\begin_inset Formula $g\left(y\right)=f\left(\alpha\left(y\right)\right)+f\left(\beta\left(y\right)\right)$
\end_inset

 allows this to be iterated a third time:
\begin_inset Formula 
\begin{eqnarray*}
\left[\mathcal{L}^{3}f\right]\left(y\right)= & \frac{\Theta\left(y\right)}{\left(2K\right)^{3}} & \left[\Theta\left(\alpha\left(y\right)\right)\left[\Theta\left(\alpha^{2}\left(y\right)\right)g\left(\alpha^{2}\left(y\right)\right)+\Theta\left(\beta\alpha\left(y\right)\right)g\left(\beta\alpha\left(y\right)\right)\right]+\right.\\
 &  & \left.\Theta\left(\beta\left(y\right)\right)\left[\Theta\left(\alpha\beta\left(y\right)\right)g\left(\alpha\beta\left(y\right)\right)+\Theta\left(\beta^{2}\left(y\right)\right)g\left(\beta^{2}\left(y\right)\right)\right]\right]
\end{eqnarray*}

\end_inset

and a fourth time, this time omitting the argument, and the various nesting
 parenthesis.
\begin_inset Formula 
\begin{eqnarray*}
\left[\mathcal{L}^{4}f\right]\left(y\right)= & \frac{\Theta\left(y\right)}{\left(2K\right)^{4}} & \left[\Theta\alpha\Theta\alpha^{2}\left[\Theta\alpha^{3}g\alpha^{3}+\Theta\beta\alpha^{2}g\beta\alpha^{2}\right]+\right.\\
 &  & \Theta\alpha\Theta\beta\alpha\left[\Theta\alpha\beta\alpha g\alpha\beta\alpha+\Theta\beta^{2}\alpha g\beta^{2}\alpha\right]\\
 &  & \Theta\beta\Theta\alpha\beta\left[\Theta\alpha^{2}\beta g\alpha^{2}\beta+\Theta\beta\alpha\beta g\beta\alpha\beta\right]\\
 &  & \left.\Theta\beta\Theta\beta^{2}\left[\Theta\alpha\beta^{2}g\alpha\beta^{2}+\Theta\beta^{3}g\beta^{3}\right]\right]
\end{eqnarray*}

\end_inset

Notice that the primary structure is given by a product of step functions.
 This is more conveniently visualized as a tree:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename tree.eps
	width 70col%

\end_inset


\end_layout

\begin_layout Standard
For any given iteration, the result is the sum of the vertexes at a given
 level, while the product of step functions is the product of the step functions
 in the tree, following the path to each node.
 Because any particular step function might be zero, it effectively acts
 to cut off the tree at that location.
 It is therefore interesting to understand general products of the 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 functions.
 
\end_layout

\begin_layout Standard
It is convenient to define 
\begin_inset Formula 
\[
\gamma_{x}\left(y\right)=\frac{x}{2}+\frac{y}{2K}
\]

\end_inset

so that 
\begin_inset Formula $\alpha\left(y\right)=\gamma_{0}\left(y\right)$
\end_inset

 and 
\begin_inset Formula $\beta\left(y\right)=\gamma_{1}\left(y\right)$
\end_inset

, so that a general iterated sequence of intermixed 
\begin_inset Formula $\alpha$
\end_inset

's and 
\begin_inset Formula $\beta$
\end_inset

's can be written uniformly in terms of 
\begin_inset Formula $\gamma$
\end_inset

.
 Given a sequence of bits 
\begin_inset Formula $b_{0}b_{1}b_{2}\cdots b_{n}$
\end_inset

 with each 
\begin_inset Formula $b_{k}$
\end_inset

 being either zero or one, the iterated sequence of functions can be written
 as
\begin_inset Formula 
\begin{equation}
\left(\gamma_{b_{0}}\gamma_{b_{1}}\gamma_{b_{2}}\cdots\gamma_{b_{n}}\right)\left(y\right)=\frac{1}{2}\left[b_{0}+\frac{b_{1}}{2K}+\frac{b_{2}}{\left(2K\right)^{2}}+\cdots+\frac{b_{n}}{\left(2K\right)^{n}}\right]+\frac{y}{\left(2K\right)^{n+1}}\label{eq:not de Rham curve}
\end{equation}

\end_inset

So, for example: 
\begin_inset Formula 
\[
\alpha^{n}\left(y\right)=\frac{y}{\left(2K\right)^{n}}
\]

\end_inset

while 
\begin_inset Formula 
\[
\beta^{2}\left(y\right)=\frac{1}{2}+\frac{1}{2K}\left(\frac{1}{2}+\frac{y}{2K}\right)
\]

\end_inset

and, in general, that
\begin_inset Formula 
\[
\beta^{n}\left(y\right)=\frac{1}{2}\left[1+\frac{1}{2K}+\frac{1}{\left(2K\right)^{2}}+\cdots\frac{1}{\left(2K\right)^{n-1}}\right]+\frac{y}{\left(2K\right)^{n}}
\]

\end_inset

Iterated sequences of pairs of functions, of the form 
\begin_inset Formula $\gamma_{b_{0}}\gamma_{b_{1}}\gamma_{b_{2}}\cdots\gamma_{b_{n}}$
\end_inset

 are reminiscent of de Rham curves, which generalize Cesaro curves and the
 Koch snowflake.
 The proper definition of a de Rham curve assumes the sequence is of infinite
 length, and applies a certain continuity condition, and is generally carried
 out on the complex plane, so that a continuous, nowhere-differentiable
 curve results.
 Here, the curve is distinctly not continuous: eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:not de Rham curve"

\end_inset

 is a finite-length form of the shift series 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:shift series"

\end_inset

 which can be visualized as the expander function pdr 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:expander function"

\end_inset

, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Expander-Function"

\end_inset

.
 
\end_layout

\begin_layout Subsection
The Tree Function
\end_layout

\begin_layout Standard
Given a bit sequence 
\begin_inset Formula $\left(b_{k}\right)$
\end_inset

 and value for 
\begin_inset Formula $y$
\end_inset

, define the tree function as 
\begin_inset Formula 
\[
T_{K}\left(\left(b_{k}\right);y\right)=\Theta\left(y\right)\prod_{n=0}^{\infty}\Theta\left(\gamma_{b_{0}}\gamma_{b_{1}}\gamma_{b_{2}}\cdots\gamma_{b_{n}}\left(y\right)\right)
\]

\end_inset

For any given fixed sequence of bits and value of 
\begin_inset Formula $y$
\end_inset

, this function is either zero or one.
 One way to understand this function is to ask how it varies for fixed 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

, but with the bit sequence coming from the Bernoulli shift of eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:bernoulli-bits"

\end_inset

, so that 
\begin_inset Formula $b_{n}=b_{n}\left(x\right)$
\end_inset

.
 This simplifies notation, so that one can write
\begin_inset Formula 
\[
T_{K}\left(x;y\right)=T_{K}\left(\left(b_{k}\left(x\right)\right);y\right)=\Theta\left(y\right)\prod_{n=0}^{\infty}\Theta\left(\gamma_{x;n}\left(y\right)\right)
\]

\end_inset

with 
\begin_inset Formula $\gamma_{x;n}\left(y\right)=\gamma_{b_{0}}\gamma_{b_{1}}\gamma_{b_{2}}\cdots\gamma_{b_{n}}\left(y\right)$
\end_inset

.
 Its clear that the tree function has maximum support when 
\begin_inset Formula $y=0$
\end_inset

.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Gamma-functions"

\end_inset

 shows several gamma functions, and the corresponding tree function that
 results.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tree-functions"

\end_inset

 shows the 
\begin_inset Formula $x$
\end_inset

 vs.
 
\begin_inset Formula $y$
\end_inset

 behavior of the tree functions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Gamma functions
\begin_inset CommandInset label
LatexCommand label
name "fig:Gamma-functions"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename gamma-0.8-0.eps
	width 49col%

\end_inset


\begin_inset Graphics
	filename gamma-0.8-0.7.eps
	width 49col%

\end_inset


\end_layout

\begin_layout Plain Layout
Examples of 
\begin_inset Quotes eld
\end_inset

typical
\begin_inset Quotes erd
\end_inset

 gamma functions.
 Both figures show gamma functions for 
\begin_inset Formula $K=0.8$
\end_inset

; the one on the left shows them for 
\begin_inset Formula $y=0$
\end_inset

, while the one on the right shows them for 
\begin_inset Formula $y=0.7$
\end_inset

.
 Every gamma function is a sequence of plateaus; the zig-zag line is a high-orde
r gamma, essentially showing the limiting case.
 The tree function is unity whenever all of these curves are below 
\begin_inset Formula $K$
\end_inset

, and is zero when above.
 So, for example, for the left figure, the tree function is unity, for all
 values of 
\begin_inset Formula $x$
\end_inset

 less than about 0.4952; it drops to zero, then returns to unity above 
\begin_inset Formula $x=0.5$
\end_inset

, until about 0.6221, when it briefly plunges and rises again.
 Then, another dip, before finally settling to zero near 0.6541.
 For the right figure, a high-order zig-zag rises above 0.8 somewhere near
 0.4914; then 
\begin_inset Formula $\gamma_{x;1}\left(0.7\right)$
\end_inset

 rises above 0.8 and stays there, driving the tree function to zero, rendering
 all other orders irrelevant.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Created with fractal/misc/bitops/treefn.c and plotted with treefn.gplot
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tree functions
\begin_inset CommandInset label
LatexCommand label
name "fig:Tree-functions"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename step-0.7.png
	lyxscale 50
	width 49col%

\end_inset


\begin_inset Graphics
	filename step-0.8.png
	lyxscale 50
	width 49col%

\end_inset


\end_layout

\begin_layout Plain Layout
The above illustrate the 
\begin_inset Formula $y$
\end_inset

 vs.
 
\begin_inset Formula $x$
\end_inset

 dependence of the tree functions; the left image is for 
\begin_inset Formula $K=0.7$
\end_inset

, the right is for 
\begin_inset Formula $K=0.8$
\end_inset

.
 Green indicates the regions where the tree function is unity, and black
 where it is zero.
 To be clear, this shows 
\begin_inset Formula $T_{K}\left(x;y\right)$
\end_inset

 with 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 plotted along the 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 axes.
 The tree functions shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Gamma-functions"

\end_inset

 are just two horizontal slices taken from the right image: a slice along
 the bottom, and a slice a bit above the middle.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Created with fractal/misc/bitops/treestep.C
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tree function variations
\begin_inset CommandInset label
LatexCommand label
name "fig:Tree-function-variations"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename treek-0.0.png
	lyxscale 30
	width 49col%

\end_inset

 
\begin_inset Graphics
	filename treek-0.3.png
	lyxscale 30
	width 49col%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename treek-0.5.png
	lyxscale 30
	width 49col%

\end_inset

 
\begin_inset Graphics
	filename treek-0.7.png
	lyxscale 30
	width 49col%

\end_inset


\end_layout

\begin_layout Plain Layout
These figures illustrate the 
\begin_inset Formula $K$
\end_inset

 vs.
 
\begin_inset Formula $x$
\end_inset

 dependence of the tree function.
 The upper left shows 
\begin_inset Formula $T_{K}\left(x;0\right)$
\end_inset

, the upper right shows 
\begin_inset Formula $T_{K}\left(x;0.3\right)$
\end_inset

, the lower left shows 
\begin_inset Formula $T_{K}\left(x;0.5\right)$
\end_inset

, the lower right shows 
\begin_inset Formula $T_{K}\left(x;0.7\right)$
\end_inset

.
 In each case, 
\begin_inset Formula $x$
\end_inset

 runs from 0 to 1 along the 
\begin_inset Formula $x$
\end_inset

axis, while 
\begin_inset Formula $K$
\end_inset

 runs from one-half to one along the vertical axis.
 As before, green indicates where the tree function is unity, and black
 where it is zero.
 The tree functions shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Gamma-functions"

\end_inset

 correspond to horizontal slices in the first and last images.
 Note that many (possibly all??) of the green spikes in the upper-left image
 reach all the way down to the bottom, although they are mostly much thinner
 than a pixel and thus not rendered.
 The vague blue hazing near the spikes is an attempt at anti-aliasing, to
 highlight the sharpness.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Haar Basis Matrix Elements
\end_layout

\begin_layout Standard
The symmetric Haar wavelets are built from the mother wavelet
\begin_inset Formula 
\[
h\left(x\right)=\begin{cases}
1 & \mbox{for }0\le x<1/2\\
-1 & \mbox{for }1/2\le x<1
\end{cases}
\]

\end_inset

and has individual wavelets given by 
\begin_inset Formula 
\[
h_{nj}\left(x\right)=2^{n/2}h\left(2^{n}x-j\right)\;\mbox{ for }0\le j\le2^{n}-1
\]

\end_inset

The matrix elements of the transfer operator are
\begin_inset Formula 
\[
\left\langle mi\left|{\cal L}_{K}\right|nj\right\rangle =\int_{0}^{1}h_{mi}\left(x\right)\left[\mathcal{L}_{K}h_{nj}\right]\left(x\right)dx
\]

\end_inset

where the operator 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

 is given by eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xfer oper"

\end_inset

.
 Computing these by hand promptly pushes into a big mess.
 One can obtain explicit expressions, just that they are tedious to obtain.
 Some preliminary observations include that 
\begin_inset Formula 
\[
\left\langle mi\left|{\cal L}_{K}\right|nj\right\rangle =0\;\mbox{ if }K\le i/2^{m}
\]

\end_inset

because the transfer operator vanishes above 
\begin_inset Formula $K$
\end_inset

.
 In the same vein, matrix elements vanish unless 
\begin_inset Formula 
\[
\left[\frac{i}{2^{m}},\frac{i+1}{2^{m}}\right]\cap\left[\frac{2Kj}{2^{n}},\frac{2K\left(j+1\right)}{2^{n}}\right]\ne\emptyset
\]

\end_inset

 or if 
\begin_inset Formula 
\[
\left[\frac{i}{2^{m}},\frac{i+1}{2^{m}}\right]\cap\left[\frac{2Kj}{2^{n}}-K,\frac{2K\left(j+1\right)}{2^{n}}-K\right]\ne\emptyset
\]

\end_inset

In all other cases, the Haar wavelets completely fail to overlap, and thus
 the matrix elements are zero.
 In addition, only three pairs of wavelets overlap in a non-zero fashion.
 That is, for a fixed 
\begin_inset Formula $m,n$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

, there are at most six different values of 
\begin_inset Formula $i$
\end_inset

 for which the matrix elements are non-vanishing: the first three of these
 are the values for which
\begin_inset Formula 
\[
\frac{2Kj}{2^{n}}\in\left[\frac{i}{2^{m}},\frac{i+1}{2^{m}}\right]\;\mbox{ or }\;\frac{2K\left(j+\frac{1}{2}\right)}{2^{n}}\in\left[\frac{i}{2^{m}},\frac{i+1}{2^{m}}\right]\;\mbox{ or }\;\frac{2K\left(j+1\right)}{2^{n}}\in\left[\frac{i}{2^{m}},\frac{i+1}{2^{m}}\right]
\]

\end_inset

and likewise for three more.
 The observation is that the integral vanishes unless the first wavelet
 intersects an edge transition of the second wavelet.
\end_layout

\begin_layout Standard
The primary failure of this basis is that there is no obvious way to diagonalize
 the transfer operator.
 There is no obvious way of solving it, of finding it's eigenfunctions and
 eigenvalues.
\end_layout

\begin_layout Subsection
Hessenberg basis
\end_layout

\begin_layout Standard
The transfer operator can be fairly easily brought into Hessenberg matrix
 form.
 A sequence of of orthonormal functions is constructed in this section;
 when used as a basis, the transfer operator becomes almost upper-diagonal.
 
\end_layout

\begin_layout Standard
The trick to the construction is to define wavelets such that the transfer
 operator applied each wavelet causes the end-points of the wavelet to exactly
 line up with the end- or mid-points of previous wavelets, thus avoiding
 the nasty interval-overlap algebra required with the Haar basis.
 This is accomplished by carefully picking the midpoint of the next wavelet
 in the sequence to be located exactly at the discontinuity of the transfer
 operator applied to the previous wavelet.
\end_layout

\begin_layout Standard
The construction proceeds as follows.
 Let 
\begin_inset Formula 
\[
\psi_{0}\left(x\right)=\begin{cases}
\frac{1}{\sqrt{K}} & \mbox{for }0\le x\le K\\
0 & \mbox{for }K<x\le1
\end{cases}
\]

\end_inset

Consider 
\begin_inset Formula ${\cal L}_{K}\psi_{0}$
\end_inset

.
 It is the sum of two parts: two step-functions; one which is constant for
 
\begin_inset Formula $x\le K$
\end_inset

 and another that is constant for 
\begin_inset Formula $(x+K)/2K\le K$
\end_inset

.
 Solving explicitly for the location of the step, it is 
\begin_inset Formula $x=2K^{2}-K$
\end_inset

.
 For convenience, define t 
\begin_inset Formula $m_{1}=2K^{2}-K$
\end_inset

.
 Using this value, construct the wavelet
\begin_inset Formula 
\[
\psi_{1}\left(x\right)=\begin{cases}
\frac{1}{m_{1}}\sqrt{\frac{\left(K-m_{1}\right)m_{1}}{K}} & \mbox{for }0\le x\le m_{1}\\
\frac{-1}{K-m_{1}}\sqrt{\frac{\left(K-m_{1}\right)m_{1}}{K}} & \mbox{for }m_{1}<x\le K\\
0 & \mbox{for }K<x\le1
\end{cases}
\]

\end_inset

Note that this is normalized to unit length: 
\begin_inset Formula $\int_{0}^{1}\left|\psi_{1}\left(x\right)\right|^{2}dx=1$
\end_inset

 and that it is explicitly orthogonal to the first: 
\begin_inset Formula $\int_{0}^{1}\psi_{1}\left(x\right)\psi_{0}\left(x\right)dx=0$
\end_inset

.
\end_layout

\begin_layout Standard
Consider 
\begin_inset Formula ${\cal L}_{K}\psi_{1}$
\end_inset

.
 As always, it is the sum of two parts.
 The midpoint of 
\begin_inset Formula $\psi_{1}$
\end_inset

 is at 
\begin_inset Formula $m_{1}=2K^{2}-K$
\end_inset

 and this mid-point is mapped to one of two different places.
 If 
\begin_inset Formula $m_{1}<1/2$
\end_inset

 then it is mapped to 
\begin_inset Formula $m_{2}=2Km_{1}$
\end_inset

 else it maps to 
\begin_inset Formula $m_{2}=2Km_{1}-K$
\end_inset

.
 Thus, if 
\begin_inset Formula $m_{1}<1/2$
\end_inset

, define 
\begin_inset Formula 
\[
\psi_{2}\left(x\right)=\begin{cases}
0 & \mbox{for }0\le x\le m_{1}\\
\frac{1}{\left(m_{2}-m_{1}\right)}\sqrt{\frac{\left(m_{2}-m_{1}\right)\left(K-m_{2}\right)}{K-m_{1}}} & \mbox{for }m_{1}\le x\le m_{2}\\
\frac{-1}{\left(K-m_{2}\right)}\sqrt{\frac{\left(m_{2}-m_{1}\right)\left(K-m_{2}\right)}{K-m_{1}}} & \mbox{for }m_{2}<x\le K\\
0 & \mbox{for }K<x\le1
\end{cases}
\]

\end_inset

else define 
\begin_inset Formula 
\[
\psi_{2}\left(x\right)=\begin{cases}
\frac{1}{m_{2}}\sqrt{\frac{m_{2}\left(m_{2}-m_{1}\right)}{m_{1}}} & \mbox{for }0\le x\le m_{2}\\
\frac{-1}{\left(m_{1}-m_{2}\right)}\sqrt{\frac{m_{2}\left(m_{2}-m_{1}\right)}{m_{1}}} & \mbox{for }m_{2}\le x\le m_{1}\\
0 & \mbox{for }m_{1}<x\le1
\end{cases}
\]

\end_inset

Because each end of the interval on which 
\begin_inset Formula $\psi_{2}$
\end_inset

 is non-zero lies entirely within one of the constant arms of 
\begin_inset Formula $\psi_{1}$
\end_inset

, one has, by construction, that 
\begin_inset Formula $\int_{0}^{1}\psi_{2}\left(x\right)\psi_{1}\left(x\right)dx=0$
\end_inset

 (and, of course, 
\begin_inset Formula $\int_{0}^{1}\psi_{2}\left(x\right)\psi_{0}\left(x\right)dx=0$
\end_inset

.)
\end_layout

\begin_layout Standard
The rest of the basis can be constructed iteratively, based on these examples.
 Thus: let 
\begin_inset Formula $m_{p-1}$
\end_inset

 be the mid-point of 
\begin_inset Formula $\psi_{p-1}$
\end_inset

.
 Let 
\begin_inset Formula 
\[
m_{p}=\begin{cases}
2Km_{p-1} & \mbox{for }m_{p-1}\le\frac{1}{2}\\
2Km_{p-1}-K & \mbox{for }\frac{1}{2}<m_{p-1}
\end{cases}
\]

\end_inset

Let 
\begin_inset Formula $m_{l}$
\end_inset

 be largest midpoint smaller than 
\begin_inset Formula $m_{p}$
\end_inset

 (and 
\begin_inset Formula $l<p$
\end_inset

); let 
\begin_inset Formula $m_{u}$
\end_inset

 be the smallest midpoint larger than 
\begin_inset Formula $m_{p}$
\end_inset

 (and 
\begin_inset Formula $l<p$
\end_inset

).
 Let these be 
\begin_inset Formula $0$
\end_inset

 or 
\begin_inset Formula $K$
\end_inset

 if they don't exist.
 Then define 
\begin_inset Formula 
\[
\psi_{p}\left(x\right)=\begin{cases}
0 & \mbox{for }0\le x\le m_{l}\\
\frac{1}{\left(m_{p}-m_{l}\right)}\sqrt{\frac{\left(m_{p}-m_{l}\right)\left(m_{u}-m_{p}\right)}{m_{u}-m_{l}}} & \mbox{for }m_{l}\le x\le m_{p}\\
\frac{-1}{\left(m_{u}-m_{p}\right)}\sqrt{\frac{\left(m_{p}-m_{l}\right)\left(m_{u}-m_{p}\right)}{m_{u}-m_{l}}} & \mbox{for }m_{p}<x\le m_{u}\\
0 & \mbox{for }m_{u}<x\le1
\end{cases}
\]

\end_inset

By construction, this has the property that 
\begin_inset Formula $\int_{0}^{1}\psi_{p+1}\left(x\right)\psi_{n}\left(x\right)dx=0$
\end_inset

 for any 
\begin_inset Formula $n<p+1$
\end_inset

.
 A numerical exploration shows that the midpoints 
\begin_inset Formula $m_{p}$
\end_inset

 are dense in the interval 
\begin_inset Formula $(0,K)$
\end_inset

, and so this basis should be considered to be 
\begin_inset Quotes eld
\end_inset

sufficiently complete
\begin_inset Quotes erd
\end_inset

 on the interval 
\begin_inset Formula $[0,K]$
\end_inset

.
 That is, it naively seems to be a complete basis for the Hilbert space
 of square-integrable functions on 
\begin_inset Formula $[0,K]$
\end_inset

, although without full proof, some perverse ways that this might fail can
 be imagined.
\end_layout

\begin_layout Standard
This basis provides the Hessenberg representation for the transfer operator.
 Defining
\begin_inset Formula 
\begin{equation}
\left\langle n\left|{\cal L}_{K}\right|m\right\rangle =\int_{0}^{1}\psi_{n}\left(x\right)\left[\mathcal{L}_{K}\psi_{m}\right]\left(x\right)dx\label{eq:hessen-matrix-elts}
\end{equation}

\end_inset

this has the expected Hessenberg form, in that 
\begin_inset Formula 
\[
\left\langle n\left|{\cal L}_{K}\right|m\right\rangle =0\quad\mbox{ for }n>m+1
\]

\end_inset

This is just one diagonal short of being actually solvable.
 A visualization of the matrix elements is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Hessenberg-Operator-Matrix"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Hessenberg Operator Matrix Elements
\begin_inset CommandInset label
LatexCommand label
name "fig:Hessenberg-Operator-Matrix"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename matrix-0.55.png
	lyxscale 500
	width 32col%

\end_inset


\begin_inset space \thinspace{}
\end_inset


\begin_inset Graphics
	filename matrix-0.6.png
	lyxscale 500
	width 32col%

\end_inset


\begin_inset space \thinspace{}
\end_inset


\begin_inset Graphics
	filename matrix-0.65.png
	lyxscale 500
	width 32col%

\end_inset


\begin_inset VSpace 1pt
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename matrix-0.8.png
	lyxscale 500
	width 32col%

\end_inset


\begin_inset space \thinspace{}
\end_inset


\begin_inset Graphics
	filename matrix-0.95.png
	lyxscale 500
	width 32col%

\end_inset


\begin_inset space \thinspace{}
\end_inset


\begin_inset Graphics
	filename matrix-0.999.png
	lyxscale 500
	width 32col%

\end_inset


\end_layout

\begin_layout Plain Layout
Six illustrations of the absolute value of the matrix elements 
\begin_inset Formula $\left\langle n\left|{\cal L}_{K}\right|m\right\rangle $
\end_inset

 for the transfer operator 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

 for (left to right, top to bottom) 
\begin_inset Formula $K=$
\end_inset

0.55, 0.6, 0.65, 0.8, 0.95, 0.999 and 
\begin_inset Formula $0\le n,m<48$
\end_inset

 in the Hessenberg basis.
 The red color represents values of 0.66 or larger, green represents values
 of 0.33 and blue and darker correspond to 0.16 or less.
 Almost all matrix elements are in fact precisely zero; black pixels in
 these images correspond to matrix elements that are zero.
 Note that the almost all of the diagonal matrix elements are exactly zero:
 that is 
\begin_inset Formula $\left\langle n\left|{\cal L}_{K}\right|n\right\rangle =0$
\end_inset

 for most 
\begin_inset Formula $n$
\end_inset

.
 The bright-red pixels are just below the diagonal: for most 
\begin_inset Formula $n$
\end_inset

, one has that 
\begin_inset Formula $\left\langle n+1\left|{\cal L}_{K}\right|n\right\rangle \apprge0.5$
\end_inset

 with the occasional blueish pixel suggesting a smaller value.
 These two, taken together, suggests that the eigenvalue spectrum is rapidly
 decreasing.
 The first few images suggests a regular pattern that gets increasingly
 compressed and chaotic as 
\begin_inset Formula $K$
\end_inset

 increases.
 The pattern might remain visible for higher K as one zooms out.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Eigenvalues
\end_layout

\begin_layout Standard
Given the apparent sparsity visible in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Hessenberg-Operator-Matrix"

\end_inset

, one might think that the eigenvalue problem is fairly stable, numerically.
 It is not all that much.
 Numerical exploration discovers that the spectrum is a circle lying in
 the complex plane, of radius 
\begin_inset Formula $\left|\lambda\right|=1/2K$
\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
This was confirmed with both GSL gsl_eigen_nonsymmv() and Lapack DHSEQR
 solvers, with matrices up to about 
\begin_inset Formula $2000\times2000$
\end_inset

 entries.
 Both systems agree to at least six decimal places, if not more.
 Both show spradic eigenvalues off the circle, but these are not numerically
 stable; ergo, the only valid eigenvalues are thos on the circle.
 The matrix entries were constructed using the midpoint aglorithm, described
 in the last section.
 To verify that they are accurate, several techiques were used: numerical
 integration to confirm orthogonality, and the use of the GnuMP multi-precision
 library to push up accuracy.
\end_layout

\end_inset

 (Ignoring, that is, the leading eigenvalue of 1, which is easily found).
 Writing the eigenvalue as 
\begin_inset Formula $\lambda=\left|\lambda\right|\exp2\pi i\phi$
\end_inset

, the numerical exploration does not inform whether the allowed values of
 
\begin_inset Formula $\phi$
\end_inset

 are always rational, irrational or might assume arbitrary real values.
 The numerical exploration does suggest that the eigenvalues are dense on
 the circle.
 Certainly it is the case Hessenberg basis is countable, an so one would
 expect the eigenvalue spectrum obtained in this way to be countable as
 well.
 The question then arises whether the spectrum can be extended further.
 
\end_layout

\begin_layout Standard
The question of the allowed values of 
\begin_inset Formula $\phi$
\end_inset

 is interesting because if only rational 
\begin_inset Formula $\phi$
\end_inset

 are allowed, then the decaying eigenfunctions belong to a cyclic group,
 and exhibit an exact form of Poincaré recurrence as they decay.
 If irrational 
\begin_inset Formula $\phi$
\end_inset

 are allowed, then the decaying eigenfunctions are chaotic.
\end_layout

\begin_layout Standard
For 
\begin_inset Formula $K=1$
\end_inset

, the downshift is the Bernoulli shift, the transfer operator is solvable,
 and the spectrum is exactly known.
 This has been explored by various authors, most notably in the work of
 Dean Driebe.
 I've written extensively about this spectrum and the eigenvalues in other
 publications.
 To recap, it takes several forms, depending on the function space that
 one chooses to work in.
 If one restricts oneself to polynomial eigenfunctions, then the spectrum
 is real, non-negative (it has an extensive kernel) and has eigenvalues
 of 
\begin_inset Formula $2^{-n}$
\end_inset

 for all 
\begin_inset Formula $n$
\end_inset

.
 The eigenfunctions are the Bernoulli polynomials.
 Restricting to square-integrable eigenfunctions, the spectrum continuous,
 having eigenvalues on the unit disk in the complex plane.
 The continuous-spectrum eigenfunctions (for eigenvalues other than 
\begin_inset Formula $2^{-n}$
\end_inset

) can be understood in several ways: if forced to be differentiable, then
 they are not bounded (they diverge) at the endpoints of the interval.
 If forced to be bounded, then they are fractal (non-smooth) over the entire
 interval.
 The unitary spectrum corresponds to differentiable-nowhere eigenfunctions
 (wait, or continuous-nowhere? I forget.)
\end_layout

\begin_layout Standard
A pair of plausible, numerically-extracted eigenfunctions are shown in image
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Decaying-Eigenfunction"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Decaying Eigenfunction, Period Two
\begin_inset CommandInset label
LatexCommand label
name "fig:Decaying-Eigenfunction"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename decay-0.8.eps
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
This shows a numerically-computed decaying eigenfunction of period two,
 for 
\begin_inset Formula $K=0.8$
\end_inset

.
 It is period two, in that it corresponds to an eigenvalue of 
\begin_inset Formula $\lambda=-1/2K=-0.625$
\end_inset

, so that after one iteration of 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

, the sign flips.
 This can be confirmed, numerically: after one iteration, the sign really
 does flip, to within numerical errors.
 This was computed by numerically diagonalizing the 
\begin_inset Formula $861\times861$
\end_inset

 matrix given by the lowest terms of eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:hessen-matrix-elts"

\end_inset

, and then graphing the eigenvector closes to 
\begin_inset Formula $\lambda=-0.625$
\end_inset

 (The GnuMP library was used to provide the required level of precision
 in the calculations.)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

Although this figure is drawn with curves labelled 
\begin_inset Quotes eld
\end_inset

real
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

imaginary
\begin_inset Quotes erd
\end_inset

, this is a bit fantastic, and is a numeric artifact.
 For any period-two eigenfunction, the real and imaginary parts would have
 no coupling, and would be independent of each other; either one could be
 set to zero and one would still have a valid eigenfunction.
 This differs from the case of period-three and higher, where the real and
 imaginary parts are expected to mix.
 (Nor are the two components orthogonal, as one might expect.) The eigenfunction
 is also fantastic in that only slightly different numerics result in a
 completely different eigenfunction being computed.
 Even the functions resulting from diagonlizing the 
\begin_inset Formula $863\times863$
\end_inset

 matrix differ fair amount from those arising from the 
\begin_inset Formula $861\times861$
\end_inset

 matrix; there's only a general resemblance.
 This is not entirely surprising: the magnitude of the basis coefficients
 decays very slowly; even at 
\begin_inset Formula $861$
\end_inset

, that are still on the order of 
\begin_inset Formula $10^{-3}$
\end_inset

, and thus contribute strongly.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

Computed eigenfunctions for period-three are not dissimilar, nor are the
 ones for other values of 
\begin_inset Formula $K$
\end_inset

.
 They do seem to start having the general oscillatory character of 
\begin_inset Formula $\sin\left(1/x\right)$
\end_inset

 as 
\begin_inset Formula $K\to1/2$
\end_inset

, but its not clear if this is a numeric artifact, or something real.
 The wildeness of these functions contrast sharply with the seemingly tame
 
\begin_inset Formula $\lambda=1$
\end_inset

 eigenfunctions shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Density-Distribution"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Generated with fractal/misc/bitops/psieigen.gplot and psieigen.c
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
(Non-)Unitarity
\end_layout

\begin_layout Standard
The numerical results suggest a hypothesis that some fragment of 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

 is unitary, as it is ordinarily the case that when eigenvalues appear on
 the unit circle, its because the operator is unitary.
 That does not seem to be the case here.
 Specifically, define the Frobenius-Perron eigenvector 
\begin_inset Formula $\rho$
\end_inset

 as the one satisfying 
\begin_inset Formula $\mathcal{L}_{K}\rho=\rho$
\end_inset

 and normalizing it to unit length, so that 
\begin_inset Formula $\left\Vert \rho\right\Vert =1$
\end_inset

 in the Hilbert (mean-square) norm.
 Define the reduced operator 
\begin_inset Formula $\mathcal{R}_{K}$
\end_inset

 in terms of the matrix elements
\begin_inset Formula 
\[
\frac{1}{2K}\left\langle n\left|{\cal R}_{K}\right|m\right\rangle =\left\langle n\left|{\cal L}_{K}\right|m\right\rangle -\left\langle \rho\vert n\right\rangle \left\langle \rho\vert m\right\rangle 
\]

\end_inset

That is, it is just the downshift operator, with the Frobenius-Perron eigenvecto
r removed, so that 
\begin_inset Formula $\mathcal{R}_{K}\rho=0$
\end_inset

 .
 Its rescaled, so that the remaining eigenvectors of 
\begin_inset Formula $\mathcal{R}_{K}$
\end_inset

 lie on the unit circle.
 Is this operator unitary in any way? That is, might either 
\begin_inset Formula $\mathcal{R}_{K}\mathcal{R}_{K}^{\dagger}$
\end_inset

 or 
\begin_inset Formula $\mathcal{R}_{K}^{\dagger}\mathcal{R}_{K}$
\end_inset

 be the identity? Here, the 
\begin_inset Formula $\dagger$
\end_inset

 is just the transpose, as 
\begin_inset Formula $\mathcal{R}_{K}$
\end_inset

 is purely real.
 Numerical exploration clearly shows that 
\begin_inset Formula $\mathcal{R}_{K}$
\end_inset

 is neither unitary on the left nor on the right.
 Not a surprise, but does leave the understanding of 
\begin_inset Formula $\mathcal{L}_{K}$
\end_inset

 in a curious situation.
\end_layout

\begin_layout Subsection
Julia Set
\end_layout

\begin_layout Standard
Consider the two iterators 
\begin_inset Formula $a_{0}\left(y\right)=\min\left(K,2Ky\right)$
\end_inset

 and 
\begin_inset Formula $a_{1}\left(y\right)=\max\left(0,2Ky-K\right)$
\end_inset

.
 Individually, they are the two arms of the downshift.
 Here, they have been separated from each other, so that the full domain
 
\begin_inset Formula $0\le y\le1$
\end_inset

 is allowed.
 Exploring all possible inter-iterations for these gives the Julia set for
 the transfer operator: it indicates where a point 
\begin_inset Quotes eld
\end_inset

came from
\begin_inset Quotes erd
\end_inset

, for the iterated transfer operator.
 There are several related ways to visualize this.
 One way is to fix 
\begin_inset Formula $y$
\end_inset

 and then, given a bit-sequence 
\begin_inset Formula $\left(b_{n}\right)$
\end_inset

 to compute 
\begin_inset Formula 
\[
j\left(\left(b_{n}\right)\right)=a_{b_{o}}\circ a_{b_{1}}\circ a_{b_{2}}\circ\cdots\left(y\right)
\]

\end_inset

Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Julia-Set-visualization"

\end_inset

 shows a visualization for finite bit-sequences: in essence, the very first
 few iterations.
 Although it is similar to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Range-compress"

\end_inset

, it is not the same.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Julia Set visualization
\begin_inset CommandInset label
LatexCommand label
name "fig:Julia-Set-visualization"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename julie.png
	lyxscale 70
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
Consider the binary tree of dyadic fractions: that is, the tree whose rows
 are 1/2, (1/4 3/4), (1/8 3/8 5/8 7/8), ...
 Consider a function 
\begin_inset Formula $J$
\end_inset

 on this tree.
 For the head of the tree, set 
\begin_inset Formula $J\left(1/2\right)=K$
\end_inset

.
 For the next row, set 
\begin_inset Formula $J\left(1/4\right)=a_{0}\left(J\left(1/2\right)\right)$
\end_inset

 and 
\begin_inset Formula $J\left(3/4\right)=a_{1}\left(J\left(1/2\right)\right)$
\end_inset

.
 Iterate in this fashion so that 
\begin_inset Formula $J\left(\left(2k-1\right)/2^{n+1}\right)=a_{0}\left(J\left(k/2^{n}\right)\right)$
\end_inset

 and 
\begin_inset Formula $J\left(\left(2k+1\right)/2^{n+1}\right)=a_{1}\left(J\left(k/2^{n}\right)\right)$
\end_inset

 recursively.
 This produces a function 
\begin_inset Formula $J$
\end_inset

 taking values on every dyadic fraction 
\begin_inset Formula $k/2^{n}$
\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

In the above figure, 
\begin_inset Formula $K$
\end_inset

 runs from 1/2 at the bottom to 1 at the top.
 A single horizontal slice through the image shows a color-coded version
 of 
\begin_inset Formula $J$
\end_inset

, with red coding values near 1, green coding values near 1/2 and blue,
 fading to black coding values of 1/4 and less.
 Note that there are many faint blue lines that extend quite far down, but
 not all the way down: these form a stair-step.
 The image is 1024 pixels wide: it shows the first ten rows of the binary
 tree.
 Although this image is similar to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Range-compress"

\end_inset

, it differs in many details.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Created with ractal/misc/bitops/julie.C
\end_layout

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Section
The Multiplication Operator
\end_layout

\begin_layout Standard
The difficulties presented in the previous section suggests that studying
 the multiplication operator might be simpler.
 Multiplication by 
\begin_inset Formula $K$
\end_inset

 is given by 
\begin_inset Formula 
\begin{equation}
M_{K}\left(x\right)=Kx\label{eq:multiplication}
\end{equation}

\end_inset

The corresponding transfer operator is 
\begin_inset Formula 
\[
\left[\mathcal{M}_{K}f\right]\left(y\right)=\frac{1}{K}f\left(\frac{y}{K}\right)
\]

\end_inset

The multiplication operator, superficially, in itself, is not terribly interesti
ng; it simply rescales things.
 It does not generate fractals, at least, not if one confines oneself to
 real numbers and the canonical topology on the real-number line.
 If instead one works with the product topology on 
\begin_inset Formula $2^{\omega}$
\end_inset

, then the multiplication operator becomes rather complicated and difficult
 to analyze.
 In this sense, it is promising: it avoids the overt complexity of the logistic
 map, the tent map and the downshift, yet still has a complicated behavior
 in the product topology.
 In particular, the multiplication of two numbers appear to involve chaotic
 dynamics of the carry bit.
\end_layout

\begin_layout Subsection
Downshift, Revisited
\end_layout

\begin_layout Standard
The downshift of eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:downshift"

\end_inset

 takes a simple form when reinterpreted on bit-strings: it is the concatenation
 of multiplication, followed by a left-shift.
 Given a bit-string 
\begin_inset Formula $\left(b_{n}\right)=0.b_{0}b_{1}b_{2}\cdots$
\end_inset

 denote its left-shift by 
\begin_inset Formula $U$
\end_inset

 given by
\begin_inset Formula 
\[
U\left(0.b_{0}b_{1}b_{2}\cdots\right)=0.b_{1}b_{2}\cdots
\]

\end_inset

which, for real numbers, corresponds to 
\begin_inset Formula 
\[
U(x)=\begin{cases}
2x & \mbox{ for }0\le x<\frac{1}{2}\\
2x-1 & \mbox{ for }\frac{1}{2}\le x\le1
\end{cases}
\]

\end_inset

which is none-other than the Bernoulli shift of eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Bernoulli shift"

\end_inset

 with a change of notation.
 The downshift is then
\begin_inset Formula 
\[
b_{K}\left(x\right)=M_{K}\left(U\left(x\right)\right)
\]

\end_inset

so that the iterated downshift is an alternation between a left-shift and
 a multiplication.
 The act of discarding the most significant bit (the MSB) with each left-shift
 alters the dynamics of iterated multiplication.
\end_layout

\begin_layout Standard
This suggests that studying multiplication and the multiplication operator
 might provide fruitful insight into the downshift.
\end_layout

\begin_layout Subsection
Monomial Eigenfunctions
\end_layout

\begin_layout Standard
Some properties of the multiplication operator can be guessed at directly.
 Obviously, 
\begin_inset Formula $f=\mbox{const.}$
\end_inset

 is a decaying/growing eigenfunction, depending on whether 
\begin_inset Formula $K>1$
\end_inset

 or not.
 That is, one should imagine 
\begin_inset Formula $f=\mbox{const.}$
\end_inset

 as a uniform distribution of dust; with each iteration, it is spread either
 farther apart (
\begin_inset Formula $K>1$
\end_inset

) or bunched closer together (
\begin_inset Formula $K<1$
\end_inset

).
\end_layout

\begin_layout Standard
Clearly, 
\begin_inset Formula $f\left(x\right)=x^{n}$
\end_inset

 is an eigenfunction, with eigenvalue 
\begin_inset Formula $1/K^{n+1}$
\end_inset

.
 If one considers multiplication only to operate on the positive real-number
 line, then 
\begin_inset Formula $n$
\end_inset

 need not be an integer.
 In other words, the multiplication operator has a continuous spectrum in
 this situation.
\end_layout

\begin_layout Standard
If the domain of the operator is extended to functions on the non-negative
 real-number line, then 
\begin_inset Formula $n$
\end_inset

 must be positive, as otherwise 
\begin_inset Formula $f\left(0\right)$
\end_inset

 is ill-defined.
 But if 
\begin_inset Formula $n$
\end_inset

 is positive, then (for 
\begin_inset Formula $K<1$
\end_inset

) the multiplication operator only has eigenvalues greater than one, which
 is not, in general, very desirable.
\end_layout

\begin_layout Standard
If the domain of the multiplication operator is extended to the entire real-numb
er line, then 
\begin_inset Formula $n$
\end_inset

 is forced to be an integer, in order to avoid issues due to multi-valued
 functions.
 Extending the domain to the complex plane leads us astray, and so we will
 not go there.
\end_layout

\begin_layout Subsection
A Fractal Eigenfunction
\end_layout

\begin_layout Standard
The compressor function is also an eigenfunction.
 It was previously observed in eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:compressor self-sim"

\end_inset

 that 
\begin_inset Formula 
\[
\mbox{cpr}_{K/2}\left(\frac{x}{K}\right)=\frac{1}{2}\mbox{cpr}_{K/2}\left(x\right)
\]

\end_inset

whenever 
\begin_inset Formula $1<K\le2$
\end_inset

 and 
\begin_inset Formula $0\le x<1$
\end_inset

 and so, 
\begin_inset Formula $\mbox{cpr}_{K/2}$
\end_inset

 is potentially be an eigenfunction of 
\begin_inset Formula $\mathcal{M}_{K}$
\end_inset

 with eigenvalue 
\begin_inset Formula $1/2K$
\end_inset

, provided that it is extended to arguments 
\begin_inset Formula $1<x$
\end_inset

.
 This can be done as follows.
 Define the extended function, valid for 
\begin_inset Formula $0\le x<\infty$
\end_inset

 and for 
\begin_inset Formula $1/2<K\le1$
\end_inset

 as
\begin_inset Formula 
\[
\mbox{ecpr}_{K}\left(x\right)=\begin{cases}
\mbox{cpr}_{K}\left(x\right) & \mbox{if }0\le x<K\\
2\mbox{cpr}_{K}\left(\frac{x}{2K}\right) & \mbox{if }K\le x<2K^{2}\\
4\mbox{cpr}_{K}\left(\frac{x}{4K^{2}}\right) & \mbox{if }2K^{2}\le x<4K^{3}\\
2^{n}\mbox{cpr}_{K}\left(\frac{x}{\left(2K\right)^{n}}\right) & \mbox{if }K\left(2K\right)^{n-1}\le x<K\left(2K\right)^{n}
\end{cases}
\]

\end_inset

The extension is performed simply by treating the self-similarity as a recurrenc
e relation, which can be iterated to move the argument into a region where
 the original definition was sufficient.
 In essence, one applies a right-shift operator to reduce the argument.
 Since the multiplication operator is odd about 
\begin_inset Formula $x=0$
\end_inset

, on can trivially extend this to negative 
\begin_inset Formula $x$
\end_inset

 by defining 
\begin_inset Formula $\mbox{ecpr}_{K}\left(-x\right)=-\mbox{ecpr}_{K}\left(x\right)$
\end_inset

.
 
\end_layout

\begin_layout Standard
Note that the original 
\begin_inset Formula $\mbox{cpr}_{K}\left(x\right)$
\end_inset

 also had a translation symmetry: the upper half was equal to the lower
 half.
 This translation symmetry has been lost, since after all, multiplication
 does not preserve translation.
\end_layout

\begin_layout Standard
The ecpr function is not square integrable; it does not have an 
\begin_inset Formula $L_{p}$
\end_inset

-norm for any 
\begin_inset Formula $p$
\end_inset

; and this is no surprise, as its hard to imagine how it could be otherwise,
 for a function to be self-similar under scaling.
 
\end_layout

\begin_layout Standard
Define 
\begin_inset Formula $\mbox{hpr}_{K}\left(x\right)=\mbox{ecpr}_{K/2}\left(x\right)$
\end_inset

.
 This definition is valid only for 
\begin_inset Formula $1<K\le2$
\end_inset

 (Yes, this is confusing.) Then 
\begin_inset Formula $\mbox{hpr}_{K}\left(x^{n}\right)$
\end_inset

 is an eigenfunction of 
\begin_inset Formula $\mathcal{M}_{K}$
\end_inset

 with associated eigenvalue 
\begin_inset Formula $1/2K^{n}$
\end_inset

 (whenever 
\begin_inset Formula $1<K\le2$
\end_inset

).
 Note that, for 
\begin_inset Formula $n$
\end_inset

 positive, this is a decaying eigenfunction.
\end_layout

\begin_layout Subsection
A Generic log-periodic Eigenfunction
\end_layout

\begin_layout Standard
Inspired by the above, its should be clear how to build a generic eigenfunction.
 Let 
\begin_inset Formula $g\left(x\right)$
\end_inset

 be some arbitrary function, defined on the interval 
\begin_inset Formula $1\le x<K$
\end_inset

 (given some fixed 
\begin_inset Formula $1<K$
\end_inset

).
 Define its extension as
\begin_inset Formula 
\[
g_{w}^{\prime}\left(x\right)=w^{n}g\left(\frac{x}{K^{n}}\right)\;\mbox{ if }K^{n}\le x<K^{n+1}
\]

\end_inset

This has, by construction, the self-similarity relation 
\begin_inset Formula $g_{w}^{\prime}\left(Kx\right)=wg_{w}^{\prime}\left(x\right)$
\end_inset

 and so is an eigenfunction with eigenvalue 
\begin_inset Formula $w/K$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left[\mathcal{M}_{K}g_{w}^{\prime}\right]=\frac{w}{K}g_{w}^{\prime}
\]

\end_inset

This function is merely log-periodic; its not fractal.
 Perhaps its silly to illustrate this; it should be obvious, but just in
 case its not, the figure below shows such a function, for 
\begin_inset Formula $K=1.6$
\end_inset

 and 
\begin_inset Formula $w=0.8$
\end_inset

.
 It is an eigenfunction of 
\begin_inset Formula $\mathcal{M}_{1.6}$
\end_inset

 with eigenvalue of 1/2.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename generic.eps
	width 60col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left
There doesn't seem to be anything particularly interesting with this particular
 game.
 There's a simple explanation for this: The multiplication operator is generatin
g a free monoid in one generator (the iteration itself), whereas fractals
 require at least two generators of self-symmetry.
 The (usually) free interaction of multiple generators is what forces the
 fractal to appear.
\end_layout

\begin_layout Standard
Note that the 
\begin_inset Formula $\mbox{hpr}_{K}$
\end_inset

 function constructed above is a special case of this: It's self-similar,
 but the property that made it interesting, as a fractal, was erased in
 the construction.
 As before, note that 
\begin_inset Formula $g_{w}^{\prime}\left(x^{n}\right)$
\end_inset

 is an eigenfunction with eigenvalue 
\begin_inset Formula $1/Kw^{n}$
\end_inset

 (for integer 
\begin_inset Formula $n$
\end_inset

).
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Haar Basis Matrix Elements
\end_layout

\begin_layout Standard
The Haar basis matrix elements for the downshift proved to be a bit unwieldy
 and not terribly useful.
 The corresponding matrix elements for the multiplication operator have
 the same general essence, but are slightly simpler and shorter to write
 down.
 In all other respects, they still have the same tractability issues.
 
\end_layout

\begin_layout Standard
The multiplication operator 
\begin_inset Formula $\mathcal{M}_{K}$
\end_inset

 has matrix elements in the standard Haar basis:
\begin_inset Formula 
\begin{align*}
\left\langle mi\left|{\cal M}_{K}\right|nj\right\rangle = & \int_{-\infty}^{\infty}h_{mi}\left(x\right)\left[\mathcal{M}_{K}h_{nj}\right]\left(x\right)dx\\
= & \frac{2^{\left(m+n\right)/2}}{K}\int_{-\infty}^{\infty}h\left(2^{m}x-i\right)h\left(\frac{2^{n}x}{K}-j\right)dx
\end{align*}

\end_inset

Instead of confining oneself to the unit interval, here it is convenient
 to consider the entire real-number line, and thus that is the range of
 the integral.
 Likewise, 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 an be any integers, positive or negative.
 As before, matrix elements vanish unless 
\begin_inset Formula 
\[
\left[\frac{i}{2^{m}},\frac{i+1}{2^{m}}\right]\cap\left[\frac{Kj}{2^{n}},\frac{K\left(j+1\right)}{2^{n}}\right]\ne\emptyset
\]

\end_inset

This holds in three cases: where one of the intervals contains an edge transitio
n (left, middle or right) of the other interval, without also containing
 the other two.
\end_layout

\begin_layout Subsection
The Shift and Add algorithm
\end_layout

\begin_layout Standard
One can model the multiplication of real numbers with a number of different
 algorithms applied to bit strings.
 One of the simplest such algorithms is the shift-and-add algorithm, described
 here.
 Its just elementary-school long-form multiplication, applied to the binary
 expansions of the numbers.
 
\end_layout

\begin_layout Standard
There's a point worth laboring on: a bit string representing a real number
 is not the same thing as the real number.
 There are more bit-strings than there are real numbers.
 Most famously, the two bit strings 
\begin_inset Formula $0.0111\cdots$
\end_inset

 and 
\begin_inset Formula $0.1000\cdots$
\end_inset

 are two obviously distinct bit-strings, but they represent the same real
 number: one-half.
 All real numbers of the form 
\begin_inset Formula $j/2^{n}$
\end_inset

 (the 
\begin_inset Quotes eld
\end_inset

dyadic rationals
\begin_inset Quotes erd
\end_inset

) will always have dual representations; all other real numbers have a single,
 unique representation.
 These correspond to the 
\begin_inset Quotes eld
\end_inset

gaps
\begin_inset Quotes erd
\end_inset

 in the Cantor set, or, equivalently, neighboring infinite branches in the
 finite binary tree.
 Bit-strings are not real numbers.
 They're just a usable model of them.
 The usability is somewhat limited; its OK for working with individual points,
 but fails miserably for the topologies: the canonical topology on the reals
 is sharply different than the product topology on 
\begin_inset Formula $2^{\omega}$
\end_inset

.
\end_layout

\begin_layout Standard
The goal is to compute the product 
\begin_inset Formula $Kx$
\end_inset

 with 
\begin_inset Formula $0\le K\le1$
\end_inset

 and 
\begin_inset Formula $0\le x\le1$
\end_inset

 so that the product is 
\begin_inset Formula $0\le Kx\le1$
\end_inset

.
 Both 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $x$
\end_inset

 are represented by their binary expansions.
 Let the binary expansions be
\begin_inset Formula 
\[
x=0.b_{0}b_{1}b_{2}\cdots=\sum_{n=0}^{\infty}b_{n}2^{-n-1}
\]

\end_inset

and
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
K=0.c_{0}c_{1}c_{2}\cdots=\sum_{n=0}^{\infty}c_{n}2^{-n-1}
\]

\end_inset

where the 
\begin_inset Formula $b_{n}$
\end_inset

 and 
\begin_inset Formula $c_{n}$
\end_inset

 are either 0 or 1, always.
\end_layout

\begin_layout Standard
Define 
\begin_inset Formula $s_{0}=0$
\end_inset

 and 
\begin_inset Formula $s_{n+1}$
\end_inset

 to be the non-negative integer
\begin_inset Formula 
\begin{equation}
s_{n+1}=b_{n}c_{0}+b_{n-1}c_{1}+\cdots+b_{0}c_{n}=\sum_{k=0}^{n}b_{k}c_{n-k}\label{eq:carry-bits}
\end{equation}

\end_inset

Note that 
\begin_inset Formula $0\le s_{n}\le n$
\end_inset

.
 It is useful to visualize this in terms of the elementary school shifted
 tabular form:
\begin_inset Formula 
\[
\begin{array}{c}
\begin{array}{cccccc}
0 & c_{0}b_{0} & c_{0}b_{1} & c_{0}b_{2} & c_{0}b_{3} & \cdots\\
 &  & c_{1}b_{0} & c_{1}b_{1} & c_{1}b_{2} & \cdots\\
 &  &  & c_{2}b_{0} & c_{2}b_{1} & \cdots\\
+ &  &  &  & c_{3}b_{0} & \cdots
\end{array}\\
\mbox{--------------------------------------------}\\
\begin{array}{cccccc}
s_{0}\;\; & \;s_{1}\;\; & \;s_{2}\;\; & \;\;s_{3}\;\; & \;\;s_{4}\;\;\; & \cdots\end{array}
\end{array}
\]

\end_inset

 This makes clear the shift-and-add form.
 The value of each individual 
\begin_inset Formula $s_{n}$
\end_inset

 can be visualized as a stack of blocks.
 For the special case of 
\begin_inset Formula $K=0.111\cdots=1$
\end_inset

 one has that 
\begin_inset Formula $s_{n+1}=\sum_{k=0}^{n}b_{k}$
\end_inset

, that is, it is simply the total number of one-bits in the first 
\begin_inset Formula $n$
\end_inset

 locations.
\end_layout

\begin_layout Standard
The final step is to reduce the the sum series 
\begin_inset Formula $s_{n}$
\end_inset

 to a bit-string.
 This is accomplished recursively, by performing a carry operation:
\begin_inset Formula 
\begin{equation}
d_{n}=s_{n}+\left\lfloor \frac{d_{n+1}}{2}\right\rfloor \label{eq:propagate}
\end{equation}

\end_inset

where 
\begin_inset Formula $\left\lfloor d\right\rfloor =d\mod1$
\end_inset

 denotes the floor of 
\begin_inset Formula $d$
\end_inset

 (the integer part of 
\begin_inset Formula $d$
\end_inset

).
 The desired bit sequence is then
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
a_{n}=d_{n}\mod\,2\label{eq:remainder}
\end{equation}

\end_inset

Equivalently, 
\begin_inset Formula $a_{n}$
\end_inset

 is the remainder, the part of 
\begin_inset Formula $d_{n}$
\end_inset

 that was not propagated to the next location.
 Explicitly, is is 
\begin_inset Formula $a_{n}=d_{n}-2\left\lfloor d_{n}/2\right\rfloor $
\end_inset

.
 The carry-sum propagation can be imagined as a kind of bulldozer, razing
 the towers 
\begin_inset Formula $d_{n}$
\end_inset

 until they are one block high, pushing the razed bits off to the next location.
 The resulting sequence 
\begin_inset Formula $\left(a_{n}\right)$
\end_inset

 is then the bit-string for the product 
\begin_inset Formula $Kx$
\end_inset

.
 That is, 
\begin_inset Formula 
\[
Kx=0.a_{0}a_{1}a_{2}\cdots=\sum_{n=0}^{\infty}a_{n}2^{-n-1}
\]

\end_inset


\end_layout

\begin_layout Standard
The problem with this algorithm is that the relation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:propagate"

\end_inset

 for the 
\begin_inset Formula $d_{n}$
\end_inset

 is infinitely recursive, and in general is not guaranteed to terminate.
 One has to start at 
\begin_inset Formula $n=\infty$
\end_inset

 and move backwards from there.
 There are two plausible scenarios for computing the 
\begin_inset Formula $a_{n}$
\end_inset

 in practice.
 One is to search the 
\begin_inset Formula $n$
\end_inset

 until one finds that spot where 
\begin_inset Formula $\left\lfloor d_{N+1}/2\right\rfloor =0$
\end_inset

; one can then obtain the 
\begin_inset Formula $a_{n}$
\end_inset

 for all 
\begin_inset Formula $n<N$
\end_inset

 without issue.
 The problem here is to find such an 
\begin_inset Formula $N$
\end_inset

.
\end_layout

\begin_layout Standard
The other way to compute is to observe that the iteration is convergent.
 The recursion 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:propagate"

\end_inset

 only depends on a finite and fixed number of bits 
\begin_inset Quotes eld
\end_inset

behind it
\begin_inset Quotes erd
\end_inset

, roughly equal to 
\begin_inset Formula $\log_{2}n$
\end_inset

 bits that come after this.
 As noted earlier, 
\begin_inset Formula $0\le s_{n}\le n$
\end_inset

 and likewise, 
\begin_inset Formula $0\le d_{n}\le2n+1$
\end_inset

.
 To write down 
\begin_inset Formula $d_{n}$
\end_inset

, one needs at most 
\begin_inset Formula $C=1+\left\lfloor \log_{2}\left(2n+1\right)\right\rfloor $
\end_inset

 bits.
 This implies that a given 
\begin_inset Formula $d_{n}$
\end_inset

 can only perturb at most 
\begin_inset Formula $C-1$
\end_inset

 bits downstream of it.
 That is, 
\begin_inset Formula $d_{n-C+1}$
\end_inset

 depends on 
\begin_inset Formula $d_{n}$
\end_inset

 but 
\begin_inset Formula $d_{n-C}$
\end_inset

 does not.
 Thus, in order to correctly compute all bits 
\begin_inset Formula $a_{k}$
\end_inset

 for 
\begin_inset Formula $0\le k\le n-C$
\end_inset

, it is sufficient to set 
\begin_inset Formula $d_{n}$
\end_inset

 to some arbitrary value (less than 
\begin_inset Formula $2n+2$
\end_inset

) and then iterate (using the correct values for 
\begin_inset Formula $s_{k}$
\end_inset

 when 
\begin_inset Formula $k<n$
\end_inset

).
 At the end, discard all 
\begin_inset Formula $d_{k}$
\end_inset

 and 
\begin_inset Formula $a_{k}$
\end_inset

 for 
\begin_inset Formula $n-C<k$
\end_inset

, as they are incorrect.
\end_layout

\begin_layout Subsection
Tree-view
\end_layout

\begin_layout Standard
Points:
\end_layout

\begin_layout Standard
1) adding one bit is like shifting the tree over sideways.
\end_layout

\begin_layout Standard
2) multiplying by one bit is like shifting the tree down-left.
\end_layout

\begin_layout Standard
3) adding a number to itself is like shifting tree up (since its just 2x)
\end_layout

\begin_layout Section
Simplified Models of Multiplication
\end_layout

\begin_layout Standard
The shift-and-add algorithm is obviously rather complex; can it be replaced
 by something simpler? The particular question to ask is how much of the
 chaotic dynamics of the downshift is due to the propagation of the carry
 bit, and how much of it is due to other parts of the algorithm? Specifically,
 the addition of two numbers, which requires a carry bit, can be replaced
 by a bit-wise XOR of their bit strings: this generates 
\begin_inset Quotes eld
\end_inset

almost
\begin_inset Quotes erd
\end_inset

 the same results as addition, when the number of 1-bits in the strings
 are sparse, but are wrong when 1-bits appear in the same location: the
 XOR discards the carry bits.
 Thus, a simplified model of multiplication would the the shift-and-XOR
 model: it proceeds the same way as shift-and-add, but replaces addition
 with XOR.
 What does this look like, and how does the equivalent of the downshift
 behave under this operation?
\end_layout

\begin_layout Subsection
Shift-and-XOR
\end_layout

\begin_layout Standard
The shift-and-XOR algorithm must like the shift-and-add algorithm, except
 that it drops the carry bits.
 Starting from the same spot, let 
\begin_inset Formula $0\le K\le1$
\end_inset

 and 
\begin_inset Formula $0\le x\le1$
\end_inset

 and represent both by their binary expansions:
\begin_inset Formula 
\[
x=0.b_{0}b_{1}b_{2}\cdots=\sum_{n=0}^{\infty}b_{n}2^{-n-1}
\]

\end_inset

and
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
K=0.c_{0}c_{1}c_{2}\cdots=\sum_{n=0}^{\infty}c_{n}2^{-n-1}
\]

\end_inset

where the 
\begin_inset Formula $b_{n}$
\end_inset

 and 
\begin_inset Formula $c_{n}$
\end_inset

 are either 0 or 1.
\end_layout

\begin_layout Standard
Define 
\begin_inset Formula $s_{0}=0$
\end_inset

 and 
\begin_inset Formula $s_{n+1}$
\end_inset

 to be the result of XOR-ing instead of adding the bits.
\begin_inset Formula 
\[
s_{n+1}=b_{n}c_{0}\oplus b_{n-1}c_{1}\oplus\cdots\oplus b_{0}c_{n}=\bigoplus_{k=0}^{n}b_{k}c_{n-k}
\]

\end_inset

Here, the oplus symbol 
\begin_inset Formula $\oplus$
\end_inset

 denotes the XOR operation.
 Note that each 
\begin_inset Formula $s_{n}$
\end_inset

 is either zero or one.
 Reconstructing a real number from this, one defines
\begin_inset Formula 
\[
K\otimes x=0.s_{0}s_{1}s_{2}\cdots
\]

\end_inset

where the otimes symbol 
\begin_inset Formula $\otimes$
\end_inset

 is pressed into service to indicate the shift-and-XOR product.
 Note that it is symmetric: 
\begin_inset Formula $K\otimes x=x\otimes K$
\end_inset

 and so behaves at least a bit like ordinary multiplication.
 Its is not distributive over ordinary addition: 
\begin_inset Formula $\left(a+b\right)\otimes x\ne a\otimes x+b\otimes x$
\end_inset

 but it is distributive over XOR: 
\begin_inset Formula $\left(a\oplus b\right)\otimes x=\left(a\otimes x\right)\oplus\left(b\otimes x\right)$
\end_inset

.
 It is illustrated in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Shift-and-XOR"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Shift and XOR Algorithm
\begin_inset CommandInset label
LatexCommand label
name "fig:Shift-and-XOR"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename shift-xor.eps
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
This figure shows two functions, 
\begin_inset Formula $\left(2/3\right)\otimes x$
\end_inset

 and 
\begin_inset Formula $\left(4/5\right)\otimes x$
\end_inset

 as a function of 
\begin_inset Formula $x$
\end_inset

.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Created with fractal/misc/bitops/bitshow.c and bitshow.gplot 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The range of the shift-and-XOR operation is fundamentally different from
 multiplication.
 First, because the carry bit is dropped, one has that 
\begin_inset Formula $s_{0}=0$
\end_inset

 always, and so that 
\begin_inset Formula $K\otimes x\le1/2$
\end_inset

 always, even when both 
\begin_inset Formula $K\to1$
\end_inset

 and 
\begin_inset Formula $x\to1$
\end_inset

.
 Next, for any value of 
\begin_inset Formula $1/2<K\le1$
\end_inset

, the range of 
\begin_inset Formula $K\otimes x$
\end_inset

 runs over the entire interval 
\begin_inset Formula $[0,1/2]$
\end_inset

 as 
\begin_inset Formula $x$
\end_inset

 runs over the interval 
\begin_inset Formula $[0,1]$
\end_inset

.
 The measure is not compressed (other than by a factor of 2) , as there
 is in ordinary multiplication.
 That is, if 
\begin_inset Formula $S\subset\left[0,1\right]$
\end_inset

 is a measurable subset of the unit interval, with measure 
\begin_inset Formula $\mu\left(S\right)$
\end_inset

, then one has 
\begin_inset Formula $\mu\left(K\otimes S\right)=\mu\left(S\right)/2$
\end_inset

.
 There are several ways to prove this.
 One formal approach is to consider the correspondence between the natural
 measure on the reals, and the measure of cylinder sets on the product topology.
 That is, the Cantor space 
\begin_inset Formula $\left\{ 0,1\right\} ^{\omega}$
\end_inset

 is endowed with a natural topology, the product topology.
 The open sets of this topology are called 
\begin_inset Quotes eld
\end_inset

cylinder sets
\begin_inset Quotes erd
\end_inset

.
 Thier measure is uniformly distributed over unit interval, precisely because
 the Bernoulli shift is ergodic: the one implies the other.
\end_layout

\begin_layout Standard
Indeed, the shift-and-XOR algorithm can be best thought of as a formula
 for shuffling the bit-strings around, without actually altering them: re-orderi
ng them, not changing them.
 The intuitive key to this is to observe that subtracting 
\begin_inset Formula $x$
\end_inset

 from 1 just re-orders the unit interval, top to bottom, and that this is
 the same as flipping all zero bits to one, and v.v.
 That is, 
\begin_inset Formula $1-x=x\oplus0.111\cdots$
\end_inset

.
\end_layout

\begin_layout Standard
Another way to see this shuffling is to note that 
\begin_inset Formula $a\oplus a=0$
\end_inset

 and that 
\begin_inset Formula $0\oplus x=x$
\end_inset

.
 Thus, for a fixed value of 
\begin_inset Formula $a$
\end_inset

, the string 
\begin_inset Formula $x$
\end_inset

 and the string 
\begin_inset Formula $a\oplus x$
\end_inset

 are paired together, in a unique way, so that either can be gotten from
 the other.
 The function 
\begin_inset Formula $a\oplus[0,1]\to[0,1]$
\end_inset

 sending 
\begin_inset Formula $x\mapsto a\oplus x$
\end_inset

 is an exchange of these unique pairings of strings.
 It is not just a bijection, it is an involution.
 If the strings are given thier natural lexicographic sort order, the mapping
 
\begin_inset Formula $x\mapsto a\oplus x$
\end_inset

 is just a certain kind of shuffle of the sort order; it neither adds new
 strings, nor deletes any, nor changes their number.
 The function is one-to-one and onto.
 The multiply-and-XOR algorithm is just a repeated sequence of XOR's: 
\begin_inset Formula 
\[
K\otimes x=\left(\frac{c_{0}x}{2}\right)\oplus\left(\frac{c_{1}x}{4}\right)\oplus\left(\frac{c_{2}x}{8}\right)\oplus\cdots
\]

\end_inset

and so 
\begin_inset Formula $K\otimes x$
\end_inset

 is nothing more than a reshuffling of strings (along with a right-shift
 equal to the number of leading zero-bits in the binary expansion of 
\begin_inset Formula $K$
\end_inset

; the right-shift commutes with the measure on the product topology.) Thus,
 
\begin_inset Formula $K\otimes x$
\end_inset

 preserves the measure on the unit interval (up to a factor of 
\begin_inset Formula $2^{-n}$
\end_inset

 due to the above-mentioned right-shift).
 That is, for 
\begin_inset Formula $1/2<K\le1$
\end_inset

, this discussion shows that 
\begin_inset Formula $\mu\left(K\otimes S\right)=\mu\left(S\right)/2$
\end_inset

.
\end_layout

\begin_layout Subsection
Self-similarity
\end_layout

\begin_layout Standard
There are several self-similarity properties of the shift-XOR worth noting.
 It behaves very much like a classic dyadic fractal.
 Thus, one has that 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
K\otimes\left(\frac{x}{2}\right)=\frac{1}{2}\left(K\otimes x\right)=\frac{1}{2}K\otimes x
\]

\end_inset

In addition...
 TODO: illustrate the other symmetry.
\end_layout

\begin_layout Subsection
Similarity Transformations
\end_layout

\begin_layout Standard
The shift-and-XOR algorithm acts as a permutation on bit-strings.
 As a result, the XOR-analogs of the downshift and the tent map become uniformly
 ergodic, behaving exactly as the Bernoulli shift.
 The Frobenius-Perron solution to these is just the uniform distribution,
 which is featureless.
 All of the structure visible in figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Bifurcation-Diagram"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tent-Map-Bifur"

\end_inset

 is entirely due to the dynamics of the carry bit.
 Effectively, the carry-bit algorithm alters the uniform distribution of
 the Bernoulli shift (equivalently, the uniform distribution associated
 with the natural measure on Cantor space.) 
\end_layout

\begin_layout Standard
Define the XOR-analog of the downshift as
\begin_inset Formula 
\[
c_{K}\left(x\right)=\begin{cases}
4K\otimes x & \mbox{for }0\le x<\frac{1}{2}\\
4K\otimes\left(x-\frac{1}{2}\right) & \mbox{for }\frac{1}{2}\le x<1
\end{cases}
\]

\end_inset

The factor of 4, instead of the usual 2, makes up for the fact that shift-XOR
 effectively drops the top bit; thus the goal is to map each half of the
 unit interval into the entire interval 
\begin_inset Formula $[0,1]$
\end_inset

.
 
\end_layout

\begin_layout Standard
Given a fixed 
\begin_inset Formula $K$
\end_inset

, define 
\begin_inset Formula $\boxtimes_{K}:\left[0,1\right]\to\left[0,1\right]$
\end_inset

 as
\begin_inset Formula 
\[
\boxtimes_{K}\left(x\right)=2K\otimes x
\]

\end_inset

As observed previously, 
\begin_inset Formula $\boxtimes_{K}$
\end_inset

 is an automorphism of the unit interval, and more: it is a permutation
 on Cantor space.
 Let 
\begin_inset Formula $b(x)$
\end_inset

 be the Bernoulli shift of eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Bernoulli shift"

\end_inset

; then one has that 
\begin_inset Formula $c_{K}=\boxtimes_{K}\circ b$
\end_inset

.
 Taken together, this implies that the ergodic properties of iterating on
 
\begin_inset Formula $c_{K}$
\end_inset

 follow directly from the ergodic properties of the Bernoulli shift; a shuffle,
 any shuffle on the Cantor set should not alter these ergodic properties.
\end_layout

\begin_layout Standard
TODO: similarity transforms on the transfer operator...
 and the non-alteration of the eigenspectrum, even as the eigenfunctions
 are altered.
\end_layout

\begin_layout Subsection
Multiplication on the Cantor Space
\end_layout

\begin_layout Standard
The previous set of results indicates that all of the structure in the bifurcati
on diagrams of 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Bifurcation-Diagram"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tent-Map-Bifur"

\end_inset

 is entirely due to the dynamics of the propagation of the carry sum.
 To explore this, the notation needs to be improved on.
\end_layout

\begin_layout Standard
The downshift can be decomposed into multiple distinct stages.
 First, there is a conversion from the unit interval to the Cantor space;
 this was defined at the very start, but now we need a less awkward notation
 for it.
 Let 
\begin_inset Formula 
\[
\begin{array}{ccc}
\pi:2^{\omega} & \to & \left[0,1\right]\\
0.b_{0}b_{1}b_{2}\cdots & \mapsto & x
\end{array}
\]

\end_inset

be the projection from the Cantor space to the real-number unit interval,
 given by eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:bernoulli-bits"

\end_inset

.
 Note that it is a surjection: dyadic rationals (rationals of the form 
\begin_inset Formula $m/2^{n}$
\end_inset

) correspond to two distinct bit strings.
 For example, 
\begin_inset Formula $1/2$
\end_inset

 can be represented as both 
\begin_inset Formula $0.1000\cdots$
\end_inset

 and as 
\begin_inset Formula $0.0111\cdots$
\end_inset

.
 Cantor space covers the unit interval.
 Write the inverse mapping as
\begin_inset Formula 
\[
\begin{array}{ccc}
\pi^{-1}:\left[0,1\right] & \to & 2^{\omega}\\
x & \mapsto & 0.b_{0}b_{1}b_{2}\cdots
\end{array}
\]

\end_inset

As a function, it is injective but not surjective.
 It is usually convenient to ignore this, and to pretend that both 
\begin_inset Formula $\pi$
\end_inset

 and 
\begin_inset Formula $\pi^{-1}$
\end_inset

 are bijections, even though they are not.
 This rarely leads to practical difficulties, as long as one stays conceptually
 tidy.
 Better yet, just perform all work on the Cantor space, and project to the
 unit interval only when needed.
\end_layout

\begin_layout Standard
Next, turn to multiplication.
 This has three parts.
 First, the summation of the carry bits: 
\begin_inset Formula 
\[
\begin{array}{ccc}
S_{K}:2^{\omega} & \to & \mathbb{N}^{\omega}\\
0.b_{0}b_{1}b_{2}\cdots & \mapsto & \left(s_{0},s_{1},s_{2},\cdots\right)
\end{array}
\]

\end_inset

where the summation is given by eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:carry-bits"

\end_inset

.
 Here, 
\begin_inset Formula $\mathbb{N}^{\omega}$
\end_inset

 is Baire space, the space of all infinite-length sequences of non-negative
 integers.
 In number theory, this would be called the space of arithmetic functions.
 The second part of multiplication is the propagation of the carry bits.
 Denote this as 
\begin_inset Formula 
\[
\begin{array}{ccc}
C:\mathbb{N}^{\omega} & \to & \mathbb{N}^{\omega}\\
\left(s_{0},s_{1},s_{2},\cdots\right) & \mapsto & \left(d_{0},d_{1},d_{2},\cdots\right)
\end{array}
\]

\end_inset

which is defined in eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:propagate"

\end_inset

.
 Finally, one extracts the remainder, after propagation:
\begin_inset Formula 
\[
\begin{array}{ccc}
A:\mathbb{N}^{\omega} & \to & 2^{\omega}\\
\left(d_{0},d_{1},d_{2},\cdots\right) & \mapsto & \left(a_{0},a_{1},a_{2},\cdots\right)
\end{array}
\]

\end_inset

which is given by eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:remainder"

\end_inset

.
 Of the three parts into which we've decomposed multiplication, only the
 first part is parameterized by 
\begin_inset Formula $K$
\end_inset

.
 Thus, multiplication, on Cantor space, can be written as 
\begin_inset Formula $M_{K}=A\circ C\circ S_{K}$
\end_inset

.
 The shift-and-XOR algorithm omits the propagation of the carry sum.
 On Cantor space, it is just 
\begin_inset Formula $\boxtimes_{K}=A\circ S_{K}$
\end_inset

: the XOR is just modulo-2 of the carry sum.
\end_layout

\begin_layout Standard
To obtain multiplication on the real-number unit interval, we need merely
 to re-project from Cantor space to the reals.
 Thus, multiplication, given in eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:multiplication"

\end_inset

, decomposes into
\begin_inset Formula 
\[
M_{K}=\pi\circ A\circ C\circ S_{K}\circ\pi^{-1}
\]

\end_inset

The downshift of eqn 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:downshift"

\end_inset

 is then 
\begin_inset Formula 
\[
b_{k}=\pi\circ A\circ C\circ S_{K}\circ\pi^{-1}\circ b
\]

\end_inset

where 
\begin_inset Formula $b$
\end_inset

 is the Bernoulli shift.
 To simplify notation, it is convenient to go ahead and provide a symbol
 for the shift operator:
\begin_inset Formula 
\[
\begin{array}{ccc}
B:2^{\omega} & \to & 2^{\omega}\\
\left(b_{0},b_{1},b_{2},\cdots\right) & \mapsto & \left(b_{1},b_{2},\cdots\right)
\end{array}
\]

\end_inset

so that 
\begin_inset Formula $b=\pi\circ B\circ\pi^{-1}$
\end_inset

.
 The corresponding downshift on the Cantor space is
\begin_inset Formula 
\[
B_{K}=A\circ C\circ S_{K}\circ B
\]

\end_inset

which eliminates the pesky projection 
\begin_inset Formula $\pi$
\end_inset

.
 It should be clear that 
\begin_inset Formula $S_{K}$
\end_inset

 is an injection, the propagation operation 
\begin_inset Formula $C$
\end_inset

 and the remainder 
\begin_inset Formula $A$
\end_inset

 are both surjections.
 
\end_layout

\begin_layout Standard
As noted, the shift-and-XOR algorithm can be written as 
\begin_inset Formula $\boxtimes_{K}=A\circ S_{K}$
\end_inset

; the step where the carry bits are propagated is dropped.
 The XOR-version of the downshift is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
c_{K}=\boxtimes_{K}\circ B=A\circ S_{K}\circ B
\]

\end_inset

Thus, in this new notation, it reaffirms that 
\begin_inset Formula $B$
\end_inset

 is the true source of ergodicity, and that 
\begin_inset Formula $A\circ S_{K}$
\end_inset

 being a permutation does not alter the basic ergodic property of 
\begin_inset Formula $B$
\end_inset

.
 All of the structure in the bifurcation diagrams can be blamed on the propagati
on operator 
\begin_inset Formula $C$
\end_inset

.
 
\end_layout

\begin_layout Subsection
Propagation games
\end_layout

\begin_layout Standard
Pinning the 
\begin_inset Quotes eld
\end_inset

blame
\begin_inset Quotes erd
\end_inset

 of complex dynamical structure on the propagation of the carry bits seems
 to be an open invitation to replace the propagation operator 
\begin_inset Formula $C$
\end_inset

 by just about anything, to see what happens.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Carry-bit-propagation"

\end_inset

 illustrates some of the things that can happen.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Carry-bit propagation
\begin_inset CommandInset label
LatexCommand label
name "fig:Carry-bit-propagation"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename mang-carry-mod-2.png
	lyxscale 30
	width 32col%

\end_inset


\begin_inset space \thinspace{}
\end_inset


\begin_inset Graphics
	filename mang-carry-1-more.png
	lyxscale 30
	width 32col%

\end_inset


\begin_inset space \thinspace{}
\end_inset


\begin_inset Graphics
	filename mang-carry-1-less.png
	lyxscale 30
	width 32col%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename mang-carry-1.png
	lyxscale 30
	width 32col%

\end_inset


\begin_inset space \thinspace{}
\end_inset


\begin_inset Graphics
	filename mang-carry-2.png
	lyxscale 30
	width 32col%

\end_inset


\begin_inset space \thinspace{}
\end_inset


\begin_inset Graphics
	filename mang-carry-3.png
	lyxscale 30
	width 32col%

\end_inset


\end_layout

\begin_layout Plain Layout
Two triptychs of different carry-bit behaviors.
 Define 
\begin_inset Formula $F:\mathbb{N}^{\omega}\to\mathbb{N}^{\omega}$
\end_inset

 by 
\begin_inset Formula $F=f\times f\times f\times\cdots$
\end_inset

 and then iterate on 
\begin_inset Formula $A\circ C\circ F\circ S_{K}\circ B$
\end_inset

.
 For 
\begin_inset Formula $f\left(n\right)=n$
\end_inset

 one obtains, of course, the standard downshift of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Bifurcation-Diagram"

\end_inset

.
 The top-left image shows 
\begin_inset Formula $f\left(n\right)=n\mod2$
\end_inset

, which is the same as iterating on the shift-XOR function 
\begin_inset Formula $c_{K}$
\end_inset

.
 Here, 
\begin_inset Formula $K$
\end_inset

 runs from 0 at the bottom, to 1 at the top; 
\begin_inset Formula $x$
\end_inset

 runs from 0 to 1, left to right.
 The uniform red square simply indicates that the iteration is completely
 independent of 
\begin_inset Formula $K$
\end_inset

 when 
\begin_inset Formula $1/2<K\le1$
\end_inset

: it is fully uniform and ergodic in the same way that the Bernoulli shift
 is.
 The top-middle image shows 
\begin_inset Formula $f\left(n\right)=n+1$
\end_inset

, that is, pretending that there is one carry bit too many.
 The top-right shows 
\begin_inset Formula $f\left(n\right)=\max\left(0,n-1\right)$
\end_inset

, that is, having one carry-bit too few.
 
\begin_inset Newline newline
\end_inset


\begin_inset space \qquad{}
\end_inset

The bottom three shows a progression of 
\begin_inset Formula $f\left(n\right)=\max\left(n,1\right)$
\end_inset

, 
\begin_inset Formula $f\left(n\right)=\max\left(n,2\right)$
\end_inset

 and 
\begin_inset Formula $f\left(n\right)=\max\left(n,3\right)$
\end_inset

, allowing more and more carry bits to propagate.
 In the limit, this becomes figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Bifurcation-Diagram"

\end_inset

 once again.
 Except for the top-left image, the rest seem pointlessly goofy.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Created with fractal/misc/bitops/bernie.C
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Reviewing the images there makes it clear that although fiddling with the
 carry bit fundamentally alters point trajectories, it completely fails
 to open any doors that would provide insight into the structure of the
 transfer operator.
 The pictures are pretty, but appear to be meaningless.
\end_layout

\begin_layout Section
Sci-fi day-dreaming
\end_layout

\begin_layout Standard
There are many limits to computation.
 One limit is the speed of light.
 In current generation CPU chips, clock rates in the vicinity of 3 gigahertz
\begin_inset Formula $=3\times10^{9}$
\end_inset

 cycles per second.
 By comparison, the speed of light in a vacuum is about 
\begin_inset Formula $3\times10^{8}$
\end_inset

 meters per second.
 Dividing, one finds that light can travel about 
\begin_inset Formula $3\times10^{8}/3\times10^{9}=10^{-1}$
\end_inset

 meters, or about four inches: a bit bigger than the actual physical dimensions
 of a chip (typically around half-an-inch on a side), but not by much.
 Of course, the speed of light in a metal conductor is lower – about half
 the speed in a vacuum.
 And transistors are small – more than twenty-thousand times smaller.
 So, measured in terms of the size of the transistor, the speed of light
 is about ten or twenty transistor-widths per clock-cycle.
 So, OK, its still fast, at that length scale.
 But not really all that fast.
 The point here is that the speed of light is a potential limit to the speed
 of computation, and it is not all that far away.
\end_layout

\begin_layout Standard
In this setting, one can imagine the situation where the speed of propagating
 the carry bit during multiplication becomes a limiting factor.
 The above work hints at a somewhat boggling idea: can multiplication be
 effectively parallelized by working with transfer operators instead? That
 is, the multiplication of two numbers corresponds to point-wise particle
 dynamics: a discrete particle following a chaotic path through a complex
 numerical computation.
 By contrast, the transfer operator describes how a distribution propagates
 through a computation: it effectively performs 
\begin_inset Quotes eld
\end_inset

an infinite number
\begin_inset Quotes erd
\end_inset

 of multiplications at the same time, in parallel.
 That is, rather than asking how single values propagate, one could, and
 perhaps should, ask how distributions propagate – parallelize multiplication
 (for example) to an 
\begin_inset Quotes eld
\end_inset

infinite
\begin_inset Quotes erd
\end_inset

 degree.
 It is this rather ridiculous idea that suggests that the above explorations
 are not purely abstract, but have a potentially practical application.
 As I suggested – its a bit of science-fiction day-dreaming at this point.
 But it does hint at an alternate model of computation.
\end_layout

\begin_layout Standard
Variants of this model have already been explored, for decades.
 For example, Crutchfeld defined 
\begin_inset Quotes eld
\end_inset

geometric state machines
\begin_inset Quotes erd
\end_inset

 as generalizations of finite state machines, where, instead of having a
 finite matrix (a 
\begin_inset Quotes eld
\end_inset

transition matrix
\begin_inset Quotes erd
\end_inset

) act on a finite vector (the 
\begin_inset Quotes eld
\end_inset

state vector
\begin_inset Quotes erd
\end_inset

), one instead considers operators acting on homogeneous spaces – that is,
 applying a sequence of such operators on homogeneous space.
 The most famous and celebrated such space would the 
\begin_inset Formula $\mathbb{CP}^{n}$
\end_inset

 – complex projective space, with the operators that act on it being the
 the unitary ones: 
\begin_inset Formula $U(n)$
\end_inset

 – such a system defining the 
\begin_inset Formula $n$
\end_inset

-qubit quantum state machine.
 Distributions on 
\begin_inset Formula $\mathbb{CP}^{n}$
\end_inset

 are mixed states – and the idea of quantum computing is to evolve such
 states through a set of operations.
 
\end_layout

\begin_layout Standard
The point here is that computation, by means of the time-like evolution
 of distributional densities, is already being explored, but in a rather
 different context than the one explored here.
 Here, it seems like we are bowled over by the complexities of a seemingly
 much simpler system.
\end_layout

\begin_layout Section
Topological Push-Forward
\end_layout

\begin_layout Standard
The transfer operator is most generally and correctly defined as an operator
 acting on the topology of a space, and specifically, as the push-forward
 of the (uniform) measure by the iterated function.
 That is, given any open set belonging to the topology, the transfer operator
 assigns a different open set of the topology: it is a map of sets to sets.
 For iterated maps on the unit interval, it is essentially a map of cylinder
 sets, the open sets of the product topology.
 The shift-XOR experiment shows that the ergodic properties arise from the
 Bernoulli shift, and that all other properties, commonly called 
\begin_inset Quotes eld
\end_inset

chaotic
\begin_inset Quotes erd
\end_inset

, are really the side effect of something else, entirely: the internal structure
 of the transfer operator.
 Fiddling with the carry-bits cannot reveal this structure; instead, they
 just define other, pointlessly goofy iterated functions.
 Point trajectories fail to reveal the internal structure of the transfer
 operator, and at best point in a misleading direction.
 To understand the transfer operator, it must be tackled for what it is:
 one must look at how intervals are mapped to intervals, and what sort of
 symmetries can be discovered in this mapping.
 (One possible proof of the push-forward claim can be found in an earlier
 text: 
\begin_inset Quotes eld
\end_inset

On the Minkowski Measure
\begin_inset Quotes erd
\end_inset

.)
\end_layout

\begin_layout Standard
The action of the transfer operator on the sets belonging to the topology
 of the reals reveals several distinct kinds of actions.
 The topology on the reals can be generated from a basis consisting of connected
 sets.
 The transfer operator will map some connected sets to other connected sets,
 simply moving them around, shrinking or expanding them.
 In other cases, a connected set will be split into two disjoint parts.
 For maps such as the logistic map, other possibilities arise: sets are
 folded back onto one-another.
 It seems reasonable to argue that each of these different kinds of moves
 creates a distinct group (or monoid) of transformations: in a certain sense,
 those transforms that do not change th connectivity, nor do any folding,
 are all similar to one-another.
 It should be possible to write down exactly which sets belong to this type,
 and then give explicit transformation properties between them.
 Likewise, those connected sets which are split in two are all similar.
 It seems like there should be a prototype: a generic split, followed by
 some re-arrangement of the two parts.
 How can this classification be written in an insightful, useful way?
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
What, exactly, is the point of mathematics, especially in the computational
 age? Can't one just get a fast computer, iterate on the logistic map, and
 find out everything there is to find? Well, of course, yes, and no: these
 questions can be taken as either silly or as deeply philosophical, and
 it is worth the effort to understand them and address them properly.
 
\end_layout

\begin_layout Standard
First, lets dispose of some obvious mis-perceptions.
 If one carefully scrutinizes figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Density-Distribution"

\end_inset

, one will find signs of a slight unevenness in the horizontal bars.
 These are numerical artifacts due to statistical under-sampling: they smooth
 out and fade away with additional sampling of the iterated equations.
 There is a way to obtain this same figure, far more rapidly, and without
 this particular form of numerical noise: one can instead iterate on equation
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:eigen-eqn"

\end_inset

.
 This suggests one philosophical answer: the goal of mathematics is to find
 faster ways of computing things; to discover better algorithms.
\end_layout

\begin_layout Standard
A uniting theme between this, and the other text that I have written on
 fractal issues, is that they are all explorations of the structure of the
 Cantor set, the structure of the space of infinite sequences of symbols,
 and the structure of the continuum.
 That is, we know the continuum in two different ways: one way is by means
 of the natural topology on the real number line; the other is the product
 topology on the space of binary strings.
 The former is suggested by the physical universe that we actually live
 in: a continuum with spatial extents.
 The latter is suggested by the notion of time and repetition: the making
 of choices naturally leads to a tree structure; tree structures necessarily
 embed in hyperbolic spaces; the Minkowski space that we live in is hyperbolic,
 and this is why, every day, as time passes on, we get to make new choices
 precisely because the amount of room for possibilities is ever-increasing
 as time flows forward.
\end_layout

\begin_layout Standard
What, exactly, do the words 
\begin_inset Quotes eld
\end_inset

exactly solvable
\begin_inset Quotes erd
\end_inset

 really mean? So, for example, equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:not de Rham curve"

\end_inset

 involves summation and multiplication, which has this aura of comfortable
 preciseness that an iterated function somehow does not.
 Where does this sensation come from? When performing arbitrary-precision
 numerical computations, it should be clear that neither addition nor multiplica
tion are simple or easy: they both require fairly complex algorithms to
 implement, and have not-insignificant runtimes.
 To be more precise: the algorithms are non-trivial because one is using
 a binary digit expansion to provide a model for a real number.
 Different representations of the real numbers potentially offer different
 algorithms and performance profiles: one could represent reals by rationals,
 but then one is left with the issue of trying to add or multiply two integers.
 To accomplish this, one has to represent the integers as sequences of bits,
 which only takes us back to where we started.
 There is no computational oracle that automatically knows the sum or product
 of integers: it has to be computed.
 The analysis being done in this text is a kind of a game, where not only
 is one algebraic arrangement of symbols is being compared to another, but
 also one computational algorithm is being compared for another.
 Unfortunately, this latter comparison is very nearly opaque and hidden.
 If only it could be made visible in some simple fashion.
\end_layout

\begin_layout Standard
The situation here is more easily illustrated in a different domain.
 The hypergeometric series was presented ad studied by Gauss; Gauss, Kummer,
 Pfaff and Euler observed various identities yoking together different series.
 By the 1950's, thousands of relations were known, along with some algorithms
 that can enumerate infinite series of relations.
 The curious situation is that there is no known algorithm that can enumerate
 all such relations; there is no systematic way to classify them.
 The situation does seem to make clear that there is an interplay between
 infinite series and algorithmic relationships between them.
 Stated a different way: hypergeometric series are self-similar, and the
 identities relating them are expressions of that self-similarity.
\end_layout

\begin_layout Standard
To further sharpen this idea: the dyadic monoid is the generator of self-symmetr
y in many common fractals; this is 
\begin_inset Quotes eld
\end_inset

well-known
\begin_inset Quotes erd
\end_inset

, and I have explored this in other texts.
 A more general setting for fractal self-similarities is given by tilings
 of the hyperbolic surface: to each tiling, there are corresponding fractals,
 the self-similarity of which are given by the tiling.
 The figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undershift-Bifurcation-Diagram"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tent-Map-Bifur"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Logistic-Map-Bifurcation"

\end_inset

 are clearly self-similar in some obscure way: it is visually clear, but
 providing a simple algebraic expression describing the similarity is difficult;
 I have not been successful in this.
 None-the-less, it seems self-evident that it will be the dyadic monoid
 that is somehow responsible for, or underlying the symmetries (unless,
 of course, there is some other, as yet undiscovered structure).
 
\end_layout

\begin_layout Standard
The meta-question is: what is the correct framework by which one can best
 understand the interplay between symmetries, infinite series and algorithms?
 The current tool-set seems impoverished: it does not 
\begin_inset Quotes eld
\end_inset

solve
\begin_inset Quotes erd
\end_inset

 the systems in this text.
 Worse, the current system reifies addition and multiplication into oracular
 operations that magically obtain 
\begin_inset Quotes eld
\end_inset

the right answer
\begin_inset Quotes erd
\end_inset

, when it is clear from numerical methods that addition and multiplication
 are necessarily algorithmic operations performed on finite truncations
 of infinite series.
 It would be nice to place these operations on equal footings, so as to
 expose the true nature of this beast.
\end_layout

\begin_layout Section
Bibliography
\end_layout

\begin_layout Standard
There is no bibliography.
 Search engines exist to help you find the things you don't know, and want
 to find out more about.
\end_layout

\end_body
\end_document
